@use "sass:math";
@use "nok-variables";
@use "nok-mixins";

:root {
  @each $key, $value in nok-variables.$exposed-variables {
    --#{nok-variables.$prefix}-#{$key}: #{$value};
  }
}

.#{nok-variables.$prefix}-heading-font {
  @include nok-mixins.nok-heading-font;
}
.#{nok-variables.$prefix}-small-text-font,
.#{nok-variables.$prefix}-text-font {
  @include nok-mixins.nok-text-font;
}

.#{nok-variables.$prefix}-stretched-link {
  &::after {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: 1;
    content: "";
  }
  @at-root *:has(&) {
    position: relative;
  }
}

/* Enable draggable cursor for non-touch devices */
@media (pointer: fine) {
  .#{nok-variables.$prefix}-draggable {
    & {
      cursor: grab;
    }

    &:active {
      cursor: grabbing;
      user-select: none;
    }
  }
}

.fw-bold {
  font-weight: 600;
}

.#{nok-variables.$prefix}-bg-blur {
  backdrop-filter: blur(5px);
  &--large {
    backdrop-filter: blur(10px);
  }
}

/* Alpha classes */
$alphas: (
    "alpha-1": 1,
    "bg-alpha-1": 1,
);
@for $i from 0 through 10 {
  $value: ($i / 10);
  .#{nok-variables.$prefix}-alpha-#{$i} {
    --local-color-alpha: #{$value};
  }
  .#{nok-variables.$prefix}-bg-alpha-#{$i} {
    --local-bg-color-alpha: #{$value};
  }
  @media (prefers-color-scheme: dark) {
    .#{nok-variables.$prefix}-dark-alpha-#{$i} {
      --local-color-alpha: #{$value};
    }
    .#{nok-variables.$prefix}-dark-bg-alpha-#{$i} {
      --local-bg-color-alpha: #{$value};
    }
  }
}

/* Stacking */

.#{nok-variables.$prefix}-sticky {
  position: sticky;
  top: 0;
  z-index: nok-variables.$z-stack-top;
  &--fixed {
    position: fixed;
  }
}

@for $i from 1 through 9 {
  .#{nok-variables.$prefix}-z-#{$i} {
    z-index: #{$i};
  }
}
.#{nok-variables.$prefix}-z-top {
  z-index: nok-variables.$z-stack-top;
}

/* Aligners */

.#{nok-variables.$prefix}-valign-center {
  display: flex;
  align-items: center;
}
.#{nok-variables.$prefix}-align-self-stretch {
  align-self: stretch;
  grid-column: 1 / -1;
}
.#{nok-variables.$prefix}-align-self-end {
  align-self: end;
}

/* Rounded borders */

.#{nok-variables.$prefix}-rounded-border {
  @include nok-mixins.nok-border-radius();

  $border-sizes: 'default', 'large', 'x-large', 'xx-large';
  $border-positions: 'top', 'right', 'left', 'bottom';

  @each $size in $border-sizes {
    @if $size == 'default' {
      @each $pos in $border-positions {
        &-#{$pos} {
          @include nok-mixins.nok-border-radius('default', $pos);
        }
      }
    } @else {
      &-#{$size} {
        @include nok-mixins.nok-border-radius($size);

        @each $pos in $border-positions {
          &-#{$pos} {
            @include nok-mixins.nok-border-radius($size, $pos);
          }
        }
      }
    }
  }
}


/* Breakpoint-related modifiers */
@each $breakpoint, $section-max-width in nok-variables.$section-max-widths {
  @include nok-mixins.media-breakpoint-only($breakpoint, nok-variables.$grid-breakpoints) {
    /* Border-radius modifiers */
    .#{nok-variables.$prefix}-no-border-#{$breakpoint} {
      border-radius: 0 !important;
    }
    /* Visibility */
    .#{nok-variables.$prefix}-invisible-#{$breakpoint} {
      display: none !important;
    }
  }
  @if ($breakpoint == xs) {
    @include nok-mixins.media-breakpoint-down($breakpoint, nok-variables.$grid-breakpoints) {
      /* Border-radius modifiers */
      .#{nok-variables.$prefix}-no-border-#{$breakpoint} {
        border-radius: 0 !important;
      }
      /* Visibility */
      .#{nok-variables.$prefix}-invisible-#{$breakpoint} {
        display: none !important;
      }
    }
  }
  @include nok-mixins.media-breakpoint-up($breakpoint, nok-variables.$grid-breakpoints) {
    /* Visibility from breakpoint up*/
    .#{nok-variables.$prefix}-invisible-from-#{$breakpoint} {
      display: none !important;
    }
    /* Border-radius modifiers */
    .#{nok-variables.$prefix}-no-border-from-#{$breakpoint} {
      border-radius: 0 !important;
    }
  }
  @include nok-mixins.media-breakpoint-down($breakpoint, nok-variables.$grid-breakpoints) {
    /* Visibility from breakpoint to*/
    .#{nok-variables.$prefix}-invisible-to-#{$breakpoint} {
      display: none !important;
    }
    /* Border-radius modifiers */
    .#{nok-variables.$prefix}-no-border-to-#{$breakpoint} {
      border-radius: 0 !important;
    }
  }
}


/* margin */
@for $i from 1 through 5 {
  .#{nok-variables.$prefix}-mt-#{$i} {
    margin-top: #{($i * nok-variables.$padding-base)};
  }
}

/* animations */
@media (prefers-reduced-motion: no-preference) {
  @keyframes slide--in {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0%);
      opacity: 1;
    }
  }

  @keyframes slide--out {
    from {
      transform: translateX(0%);
      opacity: 1;
    }
    to {
      transform: translateX(100%);
      opacity: 1;
    }
  }

  @keyframes fade--in {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes fade--out {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
    }
  }
}

/* accessibility */

.#{nok-variables.$prefix}-accessibility-helper {
  display: none;
  visibility: hidden;
  inset: 0;
  position: fixed;
  z-index: nok-variables.$z-stack-top + 1;
  pointer-events: none;
}

@media (prefers-contrast: less) {
  body > .#{nok-variables.$prefix}-accessibility-helper {
    display: block;
    visibility: visible;
    backdrop-filter: brightness(0.9) contrast(0.9);
  }
}
@media (prefers-contrast: more) {
  body > .#{nok-variables.$prefix}-accessibility-helper {
    display: block;
    visibility: visible;
    backdrop-filter: brightness(1.1) contrast(1.1);
  }
}

/* Font size */
@for $i from 1 through 6 {
  .#{nok-variables.$prefix}-fs-#{$i} {
    font-size: var(--nok25-font-size-#{(7- $i)});
  }
}
.#{nok-variables.$prefix}-fs-buttons {
  font-size: var(--nok25-font-size-buttons);
}
