@use "../nok-variables";
@use 'sass:list';
@use 'sass:map';

@mixin nok-heading-font {
  font-family: var(--nok-heading-font-family, nok-variables.$heading-font-family);
  font-size-adjust: var(--nok-heading-font-size-adjust, nok-variables.$heading-font-size-adjust);
  -webkit-text-size-adjust: 100%;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  text-rendering: optimizelegibility;
  font-optical-sizing: auto;
  font-style: normal;
  font-weight: 500;
}
@mixin nok-text-font {
  font-family: var(--nok-text-font-family, nok-variables.$text-font-family);
  font-size-adjust: var(--nok-text-font-size-adjust, nok-variables.$text-font-size-adjust);
  -webkit-text-size-adjust: 100%;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  text-rendering: optimizelegibility;
  font-optical-sizing: auto;
  font-style: normal;
}

@mixin nok-subtle-shadow {
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}
@mixin nok-subtle-shadow-menu {
  box-shadow: -8px 8px 16px rgba(0, 0, 0, 0.1);
}
@mixin nok-btn-shadow-border {
  box-shadow: 0 0 0 0 hsla(0 0 0 / 0);
  &:hover, &:focus {
    box-shadow: 0 0.4rem 0.1rem -0.3rem hsla(0 0 50 / 0.15);
  }
}

///**
// * Mixin to apply border-radius with customizable size and position.
// * by hnldesign - 2025
// *
// * @param {String} $size - The size of the border-radius. Options: 'default', 'large', 'x-large', 'xx-large'.
// * @param {String} $position - The position to apply the border-radius. Options: 'all', 'bottom', 'top', 'left', 'right'.
// */
@mixin nok-border-radius($size: 'default', $position: 'all') {
  // Determine border-radius based on size
  $radius: var(--nok-default-border-radius, 0.4rem);

  @if $size == 'large' {
    $radius: var(--nok-default-border-radius--large, 1rem);
  } @else if $size == 'x-large' {
    $radius: calc(var(--nok-default-border-radius--large, 1rem) * 2.5);
  } @else if $size == 'xx-large' {
    $radius: calc(var(--nok-default-border-radius--xx-large, 1rem) * 4);
  }

  overflow: hidden;
  // Apply border-radius based on position
  @if $position == 'all' {
    border-radius: $radius;
  } @else if $position == 'bottom' {
    border-radius: 0 0 $radius $radius;
  } @else if $position == 'top' {
    border-radius: $radius $radius 0 0;
  } @else if $position == 'left' {
    border-radius: $radius 0 0 $radius;
  } @else if $position == 'right' {
    border-radius: 0 $radius $radius 0;
  }
}


@mixin nok-focus-ring {
  box-shadow: 0 0 0px 4px var(--nok-yellow);
  outline: 2px solid #FFF;
}

///**
// * Mixin to style inline links with hover and focus effects.
// * for NOK by hnldesign - 2025
// *
// * This mixin applies various styles to inline links, including:
// * - Custom underline with gradient background
// * - Hover and active states
// * - Focus-visible state with border radius and focus ring
// *
// * Variables:
// * - --active-color: The color of the link when active.
// * - --hover-transition-time: The duration of the hover transition.
// * - --hover-color: The color of the link when hovered.
// * - --underline-height: The height of the underline.
// * - --gradient: The gradient background for the underline.
// */
@mixin nok-inline-link {
  --active-color: #000;
  --hover-transition-time: 0.15s;
  --hover-color: var(--text-color--hover, inherit);
  --underline-height: 0.25ex;
  //noinspection CssInvalidFunction
  --gradient: linear-gradient(
          transparent 0%,
          transparent calc(50% - var(--underline-height)),
          var(--underline-color) calc(50% - var(--underline-height)),
          var(--underline-color) 150%
  );
  -webkit-tap-highlight-color: transparent;

  //font-size: var(--nok-font-size-buttons, 1.25rem);
  text-decoration: none;
  padding: .75ex .25ex;

  background-image: var(--gradient);
  background-size: 100% 200%;
  background-repeat: no-repeat;
  background-position: 0 0;

  transition: background-position var(--hover-transition-time) ease-out;

  &:hover {
    --underline-color: var(--hover-color);
    color: var(--hover-color);
    background-position: 0 calc(-1 * var(--underline-height));
  }
  &:active,
  &:hover:focus:not(:focus-visible) {
    color: var(--underline-color--active);
    background-position: 0 100%;
  }

  &:focus-visible { // focus state by other input method than mouse
    @include nok-border-radius;
    @include nok-focus-ring;
  }
}

///**
// * Mixin to style scrollbars and optionally add a fake scrollbar with identical styles.
// * by hnldesign - 2025
// *
// * @param {Length} $scrollbarHeight - The height of the scrollbar.
// * @param {Color} $scrollbarHandle - The color of the scrollbar handle.
// * @param {Color} $scrollbarHandle_active - The color of the scrollbar handle when active.
// * @param {Color} $scrollbarTrack - The color of the scrollbar track.
// */
@mixin nok-scrollbar-thin(
  $scrollbarHeight: 6px,
  $scrollbarHandle: var(--text-color, #CCC),
  $scrollbarHandle_active: var(--text-color--hover, #FFF),
  $scrollbarTrack: oklch(from var(--nok-body) l c h / 0.25)
) {
  &, + .fake-scrollbar {
    --scrollbar-height: #{$scrollbarHeight};
    --scrollbar-handle: #{$scrollbarHandle};
    --scrollbar-handle--active: #{$scrollbarHandle_active};
    --scrollbar-track: #{$scrollbarTrack};
  }
  &::-webkit-scrollbar {
    height: var(--scrollbar-height, 6px);
  }

  &::-webkit-scrollbar-track {
    background-color: var(--scrollbar-track, #0008);
    border-radius: $scrollbarHeight;
  }

  &::-webkit-scrollbar-thumb {
    background-color: var(--scrollbar-handle, #FFFE);
    border: 1px solid var(--scrollbar-handle, #FFFE);
    border-radius: $scrollbarHeight;
    &:hover {
      background-color: var(--scrollbar-handle--active, #FFFF);
      border-color: var(--scrollbar-handle--active, #FFFF);
    }
  }

  position: relative;

  @include no-javascript-properties {
    + .fake-scrollbar {
      display: none;
      visibility: hidden;
    }
  }

  @include javascript-properties {
    &:has(+ .fake-scrollbar) {
      scrollbar-width: none; //hides scrollbars in Firefox
      &::-webkit-scrollbar {
        display: none;
      }
    }

    + .fake-scrollbar {
      touch-action: none;
      -webkit-touch-callout: none;
      user-select: none;

      position: relative;
      display: flex;
      width: 100%;
      height: var(--scrollbar-height, 6px);
      background-color: var(--scrollbar-track, #0008);
      border-radius: $scrollbarHeight;
      overflow: hidden;
      .fake-scrollbar-thumb {
        touch-action: none;
        -webkit-touch-callout: none;
        user-select: none;

        cursor: grab;
        position: absolute;
        height: 100%;
        width: 20%; /* Will be dynamically updated */
        background-color: var(--scrollbar-handle, #FFFE);
        border: 1px solid var(--scrollbar-handle, #FFFE);
        border-radius: $scrollbarHeight;
        will-change: transform;
        contain: strict; // Prevents Main Thread Overload
        backface-visibility: hidden;
      }
    }
    + .fake-scrollbar:hover,
    &:hover + .fake-scrollbar,
    &.grabbed-scrollbar + .fake-scrollbar,
    &.grabbed-direct + .fake-scrollbar {
      .fake-scrollbar-thumb {
        background-color: var(--scrollbar-handle--active, #FFFF);
        border-color: var(--scrollbar-handle--active, #FFFF);
      }
    }
    &.grabbed-scrollbar + .fake-scrollbar {
      overflow: visible;
      .fake-scrollbar-thumb {
        cursor: grabbing;
        outline: 5px solid #FFF8;
      }
    }
  }

}

// Maximum breakpoint width.
// The maximum value is reduced by 0.02px to work around the limitations of
// `min-` and `max-` prefixes and viewports with fractional widths.
// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
// See https://bugs.webkit.org/show_bug.cgi?id=178261
//
//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))
//    767.98px
@function breakpoint-max($name, $breakpoints: nok-variables.$grid-breakpoints) {
  $max: map-get($breakpoints, $name);
  @return if($max and $max > 0, $max - .02, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))
//    "-sm"
@function breakpoint-infix($name, $breakpoints: nok-variables.$grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl xxl))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @if not $n {
    @error "breakpoint `#{$name}` not found in `#{$breakpoints}`";
  }
  @return if($n < list.length($breakpoint-names), list.nth($breakpoint-names, $n + 1), null);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))
//    576px
@function breakpoint-min($name, $breakpoints: nok-variables.$grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: nok-variables.$grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: nok-variables.$grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between($lower, $upper, $breakpoints: nok-variables.$grid-breakpoints) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only($name, $breakpoints: nok-variables.$grid-breakpoints) {
  $min:  breakpoint-min($name, $breakpoints);
  $next: breakpoint-next($name, $breakpoints);
  $max:  breakpoint-max($next, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($name, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($next, $breakpoints) {
      @content;
    }
  }
}

///**
// * Mixin to apply transition properties conditionally based on user preferences.
// * By hnldesign - 2025
// *
// * This mixin checks if the user has a preference for reduced motion. If the user
// * does not prefer reduced motion, it applies the transition properties to the
// * specified elements when the `body` element has the `__enable-transitions` class.
// *
// * Usage:
// * @include transition-properties(margin) {
// *   transition: margin 0.3s ease;
// * }
// * The optional property-hint lets the browser prepare for changes in the property specified,
// * as waiting for the body to assume __enable-transitions class state will create a slight stutter,
// * because the browser has not been able to prepare for this (as there's a race condition for the class being added
// * and the animation kicking off)
// */
@mixin transition-properties($property-hint: null) {
  @if ($property-hint) {
    will-change: $property-hint;
  }
  @media (prefers-reduced-motion: no-preference) {
    @at-root body.__enable-transitions & {
      @content;
    }
  }
}

///**
// * Mixin to apply styles when JavaScript is disabled.
// * By hnldesign - 2025
// *
// * This mixin targets elements when the `body` element has the `no-js` class,
// * indicating that JavaScript is disabled, since it will be unset at docReady.
// *
// * Usage:
// * @include no-javascript-properties {
// *   // Your styles here
// * }
// */
@mixin no-javascript-properties {
  @at-root body.no-js & {
    @content;
  }
}
@mixin javascript-properties {
  @at-root body:not(.no-js) & {
    @content;
  }
}

///
// Mainly used on the top navigation menus. First child (usually the logo) is 100% width, rest are flex items.
// Pass 'auto' as $first-child value to make all items flexible
//
@mixin inline-flex-menu($gap:0, $first-child: 100%) {
  --grid-gap: #{$gap};
  display: flex;
  flex-direction: row;
  flex-wrap: nowrap;
  justify-content: space-between;
  align-items: center;

  gap: var(--grid-gap, var(--#{nok-variables.$prefix}-global-grid-gap));

  //padding-top: calc(var(--grid-gap, var(--#{nok-variables.$prefix}-global-grid-gap)) * .75);
  //padding-bottom: calc(var(--grid-gap, var(--#{nok-variables.$prefix}-global-grid-gap)) * .75);

  padding-top: var(--grid-gap, var(--#{nok-variables.$prefix}-global-grid-gap));
  padding-bottom: var(--grid-gap, var(--#{nok-variables.$prefix}-global-grid-gap));

  > * {
    flex-shrink: 0;

    &:first-child {
      flex-basis: $first-child;
      flex-shrink: if($first-child == 100%, 1, 0);
    }
  }
}

@mixin accordion-button-icon($active:false) {
  @if ($active) {
    mask: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 16 16'><path fill-rule='evenodd' d='M2 8a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11A.5.5 0 0 1 2 8Z'/></svg>");
  } @else {
    mask: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 16 16'><path fill-rule='evenodd' d='M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2Z'/></svg>");
  }
  mask-size: cover;
}

@mixin nok-grid-gap($fallback: var(--#{nok-variables.$prefix}-global-grid-gap)) {
  gap:
          var(--row-gap, var(--grid-gap, $fallback))
          var(--column-gap, var(--grid-gap, $fallback));
}

@mixin nok-flex-gap($fallback: var(--#{nok-variables.$prefix}-global-grid-gap)) {
  gap:
          var(--row-gap, var(--flex-gap, $fallback))
          var(--column-gap, var(--flex-gap, $fallback));
}