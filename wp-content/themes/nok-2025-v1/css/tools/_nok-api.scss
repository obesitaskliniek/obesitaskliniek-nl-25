@use "sass:list";
@use "sass:map";

@use "../nok-variables";
@use "nok-mixins";
@use "nok-rfs";

$utilities: () !default;
$enable-important-utilities: true !default;

/* Custom Utility Generator Mixin
 * 2025 - Klaas Leussink
 * --------------------------------
 * Extended version of Bootstrap's `generate-utility` (v5.3), tailored for a more powerful and flexible utility API.
 * 
 * Supports:
 * - **Responsive utilities** via `responsive: true`
 * - **"Up to" breakpoints** (max-width media queries) via `responsive-up-to: true`
 * - **Multiple properties**, each with their own distinct value (see below)
 * - **CSS variables** via `css-var: true`
 * - **Optional variable prefixing** via `no-prefix: true`
 * - **Optional class suffixing** via `no-suffix: true`
 * - **Custom pseudo states**, RTL removal, and RFS support (as in Bootstrap)
 * 
 * Value Handling:
 * - Standard values apply the same value to all defined properties
 * - For multiple property support, pass a map of property-value pairs:
 *   @example
 *     values: (
 *       stretch: (align-self: stretch, grid-column: "1  * -1")
 *     )
 *
 * CSS Variable Handling:
 * - If `css-var: true` is set:
 *   - The CSS variable name is taken from `css-variable-name`
 *   - By default, the variable will be prefixed (e.g. `--my_prefix-grid-columns`)
 *   - If `no-prefix: true` is set, the prefix will be omitted (e.g. `--grid-columns`)
 *
 * Class Suffixing:
 * - By default, class names are suffixed with the value key (e.g. `.mb-0`)
 * - If `no-suffix: true` is set, the suffix is omitted (e.g. `.no-margin`)
 *
 * Usage Example:
 * ```scss
 * "align-grid": (
 *   responsive: false, //doesn't generate min-width responsive classes
 *   responsive-up-to: true, //generate max-width responsive classes
 *   class: align-grid,
 *   values: (
 *     stretch: (align-self: stretch, grid-column: "1  * -1")
 *   )
 * )
 * ```
 *
 * This would generate:
 * ```css
 * .align-grid-to-sm-stretch {
 *   align-self: stretch !important;
 *   grid-column: 1  * -1 !important;
 * }
 * ```

 * @param {Map} $utility - The utility definition map
 * @param {String} $infix - The responsive breakpoint infix (e.g. "-md")
 * @param {Bool} $is-rfs-media-query - Whether inside an RFS media query
 * @param {Bool} $generate-up-to - If true, generates "up to" (max-width) media queries
*/
@mixin generate-utility($utility, $infix: "", $is-rfs-media-query: false, $generate-up-to: false) {
  $values: map.get($utility, values);

  // If the values are a list or string, convert it into a map
  @if type-of($values) == "string" or type-of(list.nth($values, 1)) != "list" {
    $values: zip($values, $values);
  }

  @each $key, $value in $values {
    $properties: map.get($utility, property);

    // Multiple properties are possible, for example with vertical or horizontal margins or paddings
    @if type-of($properties) == "string" {
      $properties: append((), $properties);
    }

    // Use custom class if present
    $property-class_: map.get($utility, class);
    $property-class: if(map.has-key($utility, class), $property-class_, list.nth($properties, 1));
    @if ($generate-up-to and $infix != "") {
      $property-class: $property-class + "-to";
    }
    $property-class: if($property-class == null, "", $property-class);

    // Use custom CSS variable name if present, otherwise default to `class`
    $css-variable-name: if(map.has-key($utility, css-variable-name), map.get($utility, css-variable-name), map.get($utility, class));

    // State params to generate pseudo-classes
    $state: if(map.has-key($utility, state), map.get($utility, state), ());

    $infix: if($property-class == "" and str-slice($infix, 1, 1) == "-", str-slice($infix, 2), $infix);

    // Don't prefix if value key is null (e.g. with shadow class)
    $property-class-modifier: if($key, if($property-class == "" and $infix == "", "", "-") + $key, "");
    @if (map.get($utility, no-suffix)) {
      $property-class-modifier: "";
    }

    @if map.get($utility, rfs) {
      // Inside the media query
      @if $is-rfs-media-query {
        $val: rfs-value($value);

        // Do not render anything if fluid and non fluid values are the same
        $value: if($val == rfs-fluid-value($value), null, $val);
      } @else {
        $value: rfs-fluid-value($value);
      }
    }

    $is-css-var: map.get($utility, css-var);
    $no-prefix-css-var: map.get($utility, no-prefix);
    $css-prefix: if($no-prefix-css-var,--,--#{nok-variables.$prefix}-);
    $is-local-vars: map.get($utility, local-vars);
    $is-rtl: map.get($utility, rtl);

    @if $value != null {
      @if $is-rtl == false {
        /* rtl:begin:remove */
      }

      @if $is-css-var {
        .#{$property-class + $infix + $property-class-modifier} {
          #{$css-prefix}#{$css-variable-name}: #{$value};
        }

        @each $pseudo in $state {
          .#{$property-class + $infix + $property-class-modifier}-#{$pseudo}:#{$pseudo} {
            #{$css-prefix}#{$css-variable-name}: #{$value};
          }
        }
      } @else {
        .#{$property-class + $infix + $property-class-modifier} {
          @each $property in $properties {
            @if $is-local-vars {
              @each $local-var, $variable in $is-local-vars {
                #{$css-prefix}#{$local-var}: #{$variable};
              }
            }
            @if type-of($value) == "map" {
              @each $custom-prop, $custom-val in $value {
                #{$custom-prop}: #{$custom-val} if($enable-important-utilities, !important, null);
              }
            } @else {
              @each $property in $properties {
                #{$property}: #{$value} if($enable-important-utilities, !important, null);
              }
            }
          }
        }

        @each $pseudo in $state {
          .#{$property-class + $infix + $property-class-modifier}-#{$pseudo}:#{$pseudo} {
            @each $property in $properties {
              @if $is-local-vars {
                @each $local-var, $variable in $is-local-vars {
                  #{$css-prefix}#{$local-var}: #{$variable};
                }
              }
              @if type-of($value) == "map" {
                @each $custom-prop, $custom-val in $value {
                  #{$custom-prop}: #{$custom-val} if($enable-important-utilities, !important, null);
                }
              } @else {
                @each $property in $properties {
                  #{$property}: #{$value} if($enable-important-utilities, !important, null);
                }
              }
            }
          }
        }
      }

      @if $is-rtl == false {
        /* rtl:end:remove */
      }
    }

  }
}

@mixin generate-helpers($utilities) {

  // Generate the 'normal', non-responsive classes (e.g. .mt-1)
  @each $key, $utility in $utilities {
    @include generate-utility($utility, "");
  }

  // Loop over each breakpoint
  @each $breakpoint in map.keys(nok-variables.$grid-breakpoints) {

    // Generate media query if needed
    @include nok-mixins.media-breakpoint-up($breakpoint) {
      $infix: nok-mixins.breakpoint-infix($breakpoint, nok-variables.$grid-breakpoints);

      @if ($infix != "") {
        // Loop over each utility property
        @each $key, $utility in $utilities {
          // The utility can be disabled with `false`, thus check if the utility is a map first
          // Only proceed if responsive media queries are enabled or if it's the base media query
          @if type-of($utility) == "map" and map.get($utility, responsive) {
            @include generate-utility($utility, $infix, $generate-up-to: false);
          }
        }
      }
    }

    // Generate "up-to" classes, if wanted
    @include nok-mixins.media-breakpoint-down($breakpoint) {
      $infix: nok-mixins.breakpoint-infix($breakpoint, nok-variables.$grid-breakpoints);

      @if ($infix != "") {
        @each $key, $utility in $utilities {
          @if type-of($utility) == "map" and map.get($utility, responsive-up-to) {
            @include generate-utility($utility, $infix, $generate-up-to: true);
          }
        }
      }
    }
  }

  // RFS rescaling
  @media (min-width: nok-rfs.$rfs-mq-value) {
    @each $breakpoint in map.keys(nok-variables.$grid-breakpoints) {
      $infix: nok-mixins.breakpoint-infix($breakpoint, nok-variables.$grid-breakpoints);

      @if (map.get(nok-variables.$grid-breakpoints, $breakpoint) < nok-rfs.$rfs-breakpoint) {
        // Loop over each utility property
        @each $key, $utility in $utilities {
          // The utility can be disabled with `false`, thus check if the utility is a map first
          // Only proceed if responsive media queries are enabled or if it's the base media query
          @if type-of($utility) == "map" and map.get($utility, rfs) and (map.get($utility, responsive) or $infix == "") {
            @include generate-utility($utility, $infix, true);
          }
        }
      }
    }
  }


  // Print utilities
  @media print {
    @each $key, $utility in $utilities {
      // The utility can be disabled with `false`, thus check if the utility is a map first
      // Then check if the utility needs print styles
      @if type-of($utility) == "map" and map.get($utility, print) == true {
        @include generate-utility($utility, "-print");
      }
    }
  }

}
