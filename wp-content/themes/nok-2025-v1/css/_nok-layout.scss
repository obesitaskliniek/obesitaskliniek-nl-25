@use "sass:map";
@use "sass:string";
@use "nok-variables";
@use "tools/nok-mixins";

.nok-layout {

  &-grid, &-flex {
    --grid-gap: var(--#{nok-variables.$prefix}-padding-base, var(--#{nok-variables.$prefix}-global-grid-gap, 1.5rem));
  }

  &-grid {
    display: grid;
    gap: var(--grid-gap, var(--#{nok-variables.$prefix}-global-grid-gap));
    grid-template-columns: repeat(var(--grid-columns, 1), 1fr);


    //default: cascade down at breakpoints
    //i.e: the column count set in the class is more of a maximum.
    //Override behaviour with the nok25-columns-x helpers
    &__1-column {
      --grid-columns: 1;
    }
    &__2-column, &.fill-fill {
      --grid-columns: 2;
      @include nok-mixins.media-breakpoint-down(lg) {
        --grid-columns: 1;
      }
    }
    &__3-column {
      --grid-columns: 3;
      @include nok-mixins.media-breakpoint-down(xxl) {
        --grid-columns: 2;
      }
      @include nok-mixins.media-breakpoint-down(lg) {
        --grid-columns: 1;
      }
    }

    //Layout patterns
    &.fill-one { //fills first child across columns, followed by a single column for the second element
      > :first-child {
        grid-column-start: 1;
        grid-column-end: var(--grid-columns);
      }
      > :last-child {
        grid-column-end: span 1;
      }
    }
    &.one-fill { //fills first child across 1 colum, followed by the second element spanning across columns
      > :first-child {
        grid-column-start: 1;
        grid-column-end: span 1;
      }
      > :last-child {
        grid-column-end: span max(1, calc(var(--grid-columns) - 1));
      }
    }
    //"fill-fill" is another layout pattern, which fills both children 50/50. See 2-column layout above; it's identical

  }

  &-flex {
    display: flex;
    gap: var(--flex-gap, var(--#{nok-variables.$prefix}-global-grid-gap));
    align-items: center;
    flex-direction: row;
  }

}