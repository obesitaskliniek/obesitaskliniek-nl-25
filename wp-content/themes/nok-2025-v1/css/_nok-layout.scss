@use "sass:map";
@use "sass:string";
@use "nok-variables";
@use "tools/nok-mixins";

.nok-layout {

  &-grid {
    display: grid;

    --grid-gap: var(--#{nok-variables.$prefix}-padding-base, var(--#{nok-variables.$prefix}-global-grid-gap, 1.5rem));
    @include nok-mixins.nok-grid-gap;

    grid-template-columns: repeat(var(--grid-columns, 1), var(--grid-column-size, 1fr));

    //default: cascade down at breakpoints
    //i.e: the column count set in the class is more of a maximum.
    //Override behaviour with the nok25-columns-x helpers
    &__1-column {
      --grid-columns: 1;
    }
    &__2-column, &.fill-fill {
      --grid-columns: 2;
      @include nok-mixins.media-breakpoint-down(lg) {
        --grid-columns: 1;
      }
    }
    &__3-column {
      --grid-columns: 3;
      @include nok-mixins.media-breakpoint-down(xxl) {
        --grid-columns: 2;
      }
      @include nok-mixins.media-breakpoint-down(lg) {
        --grid-columns: 1;
      }
    }
    &__4-column {
      --grid-columns: 4;
      @include nok-mixins.media-breakpoint-down(xxxl) {
        --grid-columns: 3;
      }
      @include nok-mixins.media-breakpoint-down(xxl) {
        --grid-columns: 2;
      }
      @include nok-mixins.media-breakpoint-down(lg) {
        --grid-columns: 1;
      }
    }

    //Layout patterns
    &.fill-one { //fills first child across columns, followed by a single column for the second element
      > :first-child {
        grid-column-start: 1;
        grid-column-end: var(--grid-columns);
      }
      > :last-child {
        grid-column-end: span 1;
      }
    }
    &.one-fill { //fills first child across 1 colum, followed by the second element spanning across columns
      //> :first-child {
      //  grid-column-start: 1;
      //  grid-column-end: span 1;
      //}
      > :last-child {
        grid-column-end: span max(1, calc(var(--grid-columns) - 1));
      }
    }
    &.fill-last { //like one-fill, but more robust for 3+ column layouts
      > :last-child {
        grid-column-end: span max(1, calc(var(--grid-columns) - 2));
      }
    }
    //"fill-fill" is another layout pattern, which fills both children 50/50. See 2-column layout above; it's identical

    &.overlap {
      &-middle { //uneven column counts work best
        --overlap: 1; //amount of columns overlap
        //negative or positive --offset values shift the overlapping point left or right
        --offset-final: clamp((-1 * var(--grid-columns)), var(--offset, 0), var(--grid-columns)); //clamp to avoid negative values
        > :first-child {
          grid-row: 1;
          grid-column-start: 1;
          grid-column-end: calc(((var(--grid-columns, 5) / 2) + var(--overlap)) + var(--offset-final));
        }

        > :last-child {
          grid-row: 1;
          grid-column-start: calc((var(--grid-columns, 5) / 2 - max(0, var(--overlap) - 1)) + var(--offset-final));
          grid-column-end: -1;
        }

        &.overlap-2 {
          --overlap: 2;
        }

        //&.offset-1 {
        //  --offset: 1;
        //}
        //
        //&.offset--1 {
        //  --offset: -1;
        //}

        @include nok-mixins.media-breakpoint-down(xl) {
          &.no-overlap-to-xl {
            > :first-child, > :last-child {
              grid-row: auto;
              grid-column: 1/-1;
            }
          }
        }
        @include nok-mixins.media-breakpoint-down(lg) {
          &.no-overlap-to-lg {
            > :first-child, > :last-child {
              grid-row: auto;
              grid-column: 1/-1;
            }
          }
        }
      }
    }

    > * {
      // see https://stackoverflow.com/questions/43311943/prevent-content-from-expanding-grid-items
      //overflow: hidden;
      min-width: 0;
    }

    .new-row {
      grid-column-start: 1;
    }

  }

  &-flex {
    --flex-gap: var(--#{nok-variables.$prefix}-padding-base, var(--#{nok-variables.$prefix}-global-grid-gap, 1.5rem));
    @include nok-mixins.nok-flex-gap;

    &-row, &-column {
      display: flex;
      align-items: center;
    }
    &-row { //might be confusing, but a flex-direction: row layout uses gaps that are similar to grid's COLUMN gaps
      gap: var(--column-gap, var(--flex-gap, var(--#{nok-variables.$prefix}-global-grid-gap)));
      flex-direction: row;
    }
    &-column {
      gap: var(--row-gap, var(--flex-gap, var(--#{nok-variables.$prefix}-global-grid-gap)));
      flex-direction: column;
    }
  }

}

/* Gap modifiers */
.half-grid-gap {
  gap: calc(var(--grid-gap) / 2);
}
.half-flex-gap {
  gap: calc(var(--flex-gap) / 2);
}
.no {
  &-gap {//note: will not unset the variable, so gap will still be inherited
    gap: 0rem;
  }
  &-grid-gap {
    --grid-gap: 0rem;
  }
  &-flex-gap {
    --flex-gap: 0rem;
  }
  &-row-gap {
    --row-gap: 0rem;
  }
  &-column-gap {
    --row-gap: 0rem;
  }
}