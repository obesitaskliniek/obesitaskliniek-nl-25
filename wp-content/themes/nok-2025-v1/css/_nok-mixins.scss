@use "nok-variables";

@mixin nok-heading-font {
  font-family: var(--nok25-heading-font-family, nok-variables.$heading-font-family);
  font-size-adjust: var(--nok25-heading-font-size-adjust, nok-variables.$heading-font-size-adjust);
  -webkit-text-size-adjust: 100%;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  text-rendering: optimizelegibility;
  font-optical-sizing: auto;
  font-style: normal;
  font-weight: 500;
}
@mixin nok-text-font {
  font-family: var(--nok25-text-font-family, nok-variables.$text-font-family);
  font-size-adjust: var(--nok25-text-font-size-adjust, nok-variables.$text-font-size-adjust);
  -webkit-text-size-adjust: 100%;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  text-rendering: optimizelegibility;
  font-optical-sizing: auto;
  font-style: normal;
}

@mixin nok-subtle-shadow {
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}
@mixin nok-subtle-shadow-menu {
  box-shadow: -8px 8px 16px rgba(0, 0, 0, 0.1);
}

@mixin nok-btn-shadow-border {
  box-shadow: 0 0 0 0 hsla(0 0 0 / 0);
  &:hover, &:focus {
    box-shadow: 0 0.4rem 0.1rem -0.3rem hsla(0 0 50 / 0.15);
  }
}

// Base mixin with extended size options
@mixin nok-border-radius($size: 'default', $position: 'all') {
  // Determine border-radius based on size
  $radius: var(--nok25-default-border-radius, 0.4rem);

  @if $size == 'large' {
    $radius: var(--nok25-default-border-radius--large, 1rem);
  } @else if $size == 'x-large' {
    $radius: calc(var(--nok25-default-border-radius--large, 1rem) * 2.5);
  } @else if $size == 'xx-large' {
    $radius: calc(var(--nok25-default-border-radius--xx-large, 1rem) * 4);
  }

  // Apply border-radius based on position
  @if $position == 'all' {
    border-radius: $radius;
  } @else if $position == 'bottom' {
    border-bottom-left-radius: $radius;
    border-bottom-right-radius: $radius;
    border-top-left-radius: 0;
    border-top-right-radius: 0;
  } @else if $position == 'top' {
    border-top-left-radius: $radius;
    border-top-right-radius: $radius;
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
  } @else if $position == 'left' {
    border-top-left-radius: $radius;
    border-bottom-left-radius: $radius;
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
  } @else if $position == 'right' {
    border-top-right-radius: $radius;
    border-bottom-right-radius: $radius;
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }
}



@mixin nok-focus-ring {
  //outline: 0 none;
  //box-shadow: 0 0 0 2px var(--#{nok-variables.$prefix}-focus-ring, var(--text-color--contrast, inherit));
  box-shadow: 0 0 0px 4px var(--nok25-yellow);
  outline: 2px solid #FFF;
}

@mixin nok-inline-link {
  --active-color: #000;
  --hover-transition-time: 0.15s;
  --hover-color: var(--text-color--hover, inherit);
  --underline-height: 0.25ex;
  //noinspection CssInvalidFunction
  --gradient: linear-gradient(
          transparent 0%,
          transparent calc(50% - var(--underline-height)),
          var(--underline-color) calc(50% - var(--underline-height)),
          var(--underline-color) 150%
  );
  -webkit-tap-highlight-color: transparent;

  //font-size: var(--nok25-font-size-buttons, 1.25rem);
  text-decoration: none;
  padding: .75ex 0;

  background-image: var(--gradient);
  background-size: 100% 200%;
  background-repeat: no-repeat;
  background-position: 0 0;

  transition: background-position var(--hover-transition-time) ease-out;

  &:hover {
    --underline-color: var(--hover-color);
    color: var(--hover-color);
    background-position: 0 calc(-1 * var(--underline-height));
  }
  &:active,
  &:hover:focus:not(:focus-visible) {
    color: var(--underline-color--active);
    background-position: 0 100%;
  }

  &:focus-visible { // focus state by other input method than mouse
    @include nok-border-radius;
    @include nok-focus-ring;
  }
}

@mixin nok-scrollbar-thin(
  $scrollbarHeight: 6px,
  $scrollbarHandle: var(--text-color-button, #CCC),
  $scrollbarHandle_active: var(--text-color-button--hover, #FFF),
  $scrollbarTrack: hsla(var(--nok25-body-hsl) / 0.25)
) {
  &, + .fake-scrollbar {
    --scrollbar-height: #{$scrollbarHeight};
    --scrollbar-handle: #{$scrollbarHandle};
    --scrollbar-handle--active: #{$scrollbarHandle_active};
    --scrollbar-track: #{$scrollbarTrack};
  }
  &::-webkit-scrollbar {
    height: var(--scrollbar-height, 6px);
  }

  &::-webkit-scrollbar-track {
    background-color: var(--scrollbar-track, #0008);
    border-radius: $scrollbarHeight;
  }

  &::-webkit-scrollbar-thumb {
    background-color: var(--scrollbar-handle, #FFFE);
    border: 1px solid var(--scrollbar-handle, #FFFE);
    border-radius: $scrollbarHeight;
    &:hover {
      background-color: var(--scrollbar-handle--active, #FFFF);
      border-color: var(--scrollbar-handle--active, #FFFF);
    }
  }

  position: relative;

  &:has(+ .fake-scrollbar) {
    scrollbar-width: none; //hides scrollbars in Firefox
    &::-webkit-scrollbar {
      display: none;
    }
  }

  /* Fake Scrollbar */
  + .fake-scrollbar {
    touch-action: none;
    -webkit-touch-callout: none;
    user-select: none;

    position: relative;
    display: flex;
    width: 100%;
    height: var(--scrollbar-height, 6px);
    background-color: var(--scrollbar-track, #0008);
    border-radius: $scrollbarHeight;
    overflow: hidden;
    .fake-scrollbar-thumb {
      touch-action: none;
      -webkit-touch-callout: none;
      user-select: none;

      cursor: grab;
      position: absolute;
      height: 100%;
      width: 20%; /* Will be dynamically updated */
      background-color: var(--scrollbar-handle, #FFFE);
      border: 1px solid var(--scrollbar-handle, #FFFE);
      border-radius: $scrollbarHeight;
      will-change: transform;
      contain: strict; // Prevents Main Thread Overload
      backface-visibility: hidden;
    }
  }
  + .fake-scrollbar:hover,
  &:hover + .fake-scrollbar,
  &.grabbed-scrollbar + .fake-scrollbar,
  &.grabbed-direct + .fake-scrollbar {
    .fake-scrollbar-thumb {
      background-color: var(--scrollbar-handle--active, #FFFF);
    }
  }
  &.grabbed-scrollbar + .fake-scrollbar {
    overflow: visible;
    .fake-scrollbar-thumb {
      cursor: grabbing;
      outline: 5px solid #FFF8;
    }
  }

}


@mixin make-section() {
  width: 100%;
  padding-right: var(--nok25-padding-section-sides, (nok-variables.$padding-base * 2));
  padding-left: var(--nok25-padding-section-sides, (nok-variables.$padding-base * 2));
  margin-right: auto;
  margin-left: auto;
}

// Maximum breakpoint width.
// The maximum value is reduced by 0.02px to work around the limitations of
// `min-` and `max-` prefixes and viewports with fractional widths.
// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
// See https://bugs.webkit.org/show_bug.cgi?id=178261
//
//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))
//    767.98px
@function breakpoint-max($name, $breakpoints: nok-variables.$grid-breakpoints) {
  $max: map-get($breakpoints, $name);
  @return if($max and $max > 0, $max - .02, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))
//    "-sm"
@function breakpoint-infix($name, $breakpoints: nok-variables.$grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl xxl))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @if not $n {
    @error "breakpoint `#{$name}` not found in `#{$breakpoints}`";
  }
  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))
//    576px
@function breakpoint-min($name, $breakpoints: nok-variables.$grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: nok-variables.$grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: nok-variables.$grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between($lower, $upper, $breakpoints: nok-variables.$grid-breakpoints) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only($name, $breakpoints: nok-variables.$grid-breakpoints) {
  $min:  breakpoint-min($name, $breakpoints);
  $next: breakpoint-next($name, $breakpoints);
  $max:  breakpoint-max($next, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($name, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($next, $breakpoints) {
      @content;
    }
  }
}