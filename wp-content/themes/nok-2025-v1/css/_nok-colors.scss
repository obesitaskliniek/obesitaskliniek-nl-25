@use "sass:map";
@use "sass:color";
@use "nok-variables";
@use "nok-utilities";

$white: #f3f4f9;
$black: #222;
$color-contrast-dark: #222;
$color-contrast-light: #f3f4f9;
$min-contrast-ratio: 4.5;


$nok-base-colors: (
    'lightblue':      #00b0e4,
	'darkblue':       #14477c,
	'darkerblue':     #00205b,
	'darkestblue':    #00132f,
	'yellow':         #f5d22b,
	'darkyellow':     #eab10d,
	'paleyellow':     #D5D59D,
	'green':          #54b085,
	'greenyellow':    #CCCC33,
	'greenblue':      #35aba5,
	'lightgreenblue': #93e1f4,
    'error':          #d82510,
    'body':           $white,
	'white':          $white,
	'black':          $black,
);

$nok-contrast-overrides: ();

$nok-dark-colors: map-merge(
    $nok-base-colors, (
    'body':           #00132f,
    )
);

$nok-dark-contrast-overrides: (
    'body':           #cdd9ed,
);

/* Regular color variables */
:root {
  @each $color, $value in $nok-base-colors {
    $sub_map: (
        $color : $value,
        $color+'--darker' :  color.adjust(color.adjust($value, $lightness: -5%, $space: hsl), $saturation: -10%, $space: hsl),
        $color+'--lighter' :  color.adjust(color.adjust($value, $lightness: 5%, $space: hsl), $saturation: 10%, $space: hsl)
    );
    @each $color, $value in $sub_map {
      --#{nok-variables.$prefix}-#{$color} :          #{$value};
      --#{nok-variables.$prefix}-#{$color}--h :       #{round(color.hue($value))};
      --#{nok-variables.$prefix}-#{$color}--s :       #{round(color.saturation($value))};
      --#{nok-variables.$prefix}-#{$color}--l :       #{round(color.lightness($value))};
      --#{nok-variables.$prefix}-#{$color}--hsl :     var(--#{nok-variables.$prefix}-#{$color}--h) var(--#{nok-variables.$prefix}-#{$color}--s) var(--#{nok-variables.$prefix}-#{$color}--l);
      --#{nok-variables.$prefix}-#{$color}--contrast: #{if(map-has-key($nok-contrast-overrides, $color), map.get($nok-contrast-overrides, $color), nok-utilities.get-contrast-color($value, $color-contrast-light, $color-contrast-dark))};
      --#{nok-variables.$prefix}-#{$color}--hover:    #{color.adjust(color.adjust($value, $lightness: 15%, $space: hsl), $saturation: -10%, $space: hsl)};
      --#{nok-variables.$prefix}-#{$color}--active:   #{color.adjust(color.adjust($value, $lightness: 5%, $space: hsl), $saturation: 10%, $space: hsl)};
    }
  }
  /**
   * Additional color classes
   */
  --#{nok-variables.$prefix}-focus-ring: #{$black};
}

/* Dark mode color variables */
@media (prefers-color-scheme: dark) {
  :root {
    @each $color, $value in $nok-dark-colors {
      $sub_map: (
          $color : desaturate(darken($value, 5%), 10%),
          $color+'--darker' :  desaturate(darken($value, 10%), 15%),
          $color+'--lighter' :  $value
      );
      @each $color, $value in $sub_map {
        --#{nok-variables.$prefix}-#{$color} :          #{$value};
        --#{nok-variables.$prefix}-#{$color}--h :       #{round(color.hue($value))};
        --#{nok-variables.$prefix}-#{$color}--s :       #{round(color.saturation($value))};
        --#{nok-variables.$prefix}-#{$color}--l :       #{round(color.lightness($value))};
        --#{nok-variables.$prefix}-#{$color}--hsl :     var(--#{nok-variables.$prefix}-#{$color}--h) var(--#{nok-variables.$prefix}-#{$color}--s) var(--#{nok-variables.$prefix}-#{$color}--l);
        --#{nok-variables.$prefix}-#{$color}--contrast: #{if(map-has-key($nok-dark-contrast-overrides, $color), map.get($nok-dark-contrast-overrides, $color), nok-utilities.get-contrast-color($value, $color-contrast-light, $color-contrast-dark))};
        --#{nok-variables.$prefix}-#{$color}--hover:    #{desaturate(lighten($value, 15%), 10%)};
        --#{nok-variables.$prefix}-#{$color}--active:   #{desaturate(darken($value, 5%), 10%)};
      }
    }
    /**
     * Additional color classes
     */
    --#{nok-variables.$prefix}-focus-ring: #{$white};
  }
}



@mixin bg-colors($prefix, $colorName, $colorValue) {
  --bg-color: hsla(var(--#{$prefix}-#{$colorName}--hsl) / var(--global-bg-color-alpha, var(--local-bg-color-alpha, 1)));
  --bg-color-hsl: var(--#{$prefix}-#{$colorName}--hsl);
  --bg-color--hover: var(--#{$prefix}-#{$colorName}--hover);
  --bg-color--active: var(--#{$prefix}-#{$colorName}--active);
  --text-color--contrast: var(--#{$prefix}-#{$colorName}--contrast);
  --text-color-button: var(--text-color--contrast);
  --text-color-button--hover: var(--text-color--contrast);
  background-color: var(--bg-color, inherit);
  &::selection {
    background: var(--text-color--contrast, inherit);
    color: var(--bg-color, inherit);
  }
}

@mixin text-colors($prefix, $colorName, $colorValue) {
  --text-color: hsla(var(--#{$prefix}-#{$colorName}--hsl) / var(--global-color-alpha, var(--local-color-alpha, 1)));
  --text-color-hsl: var(--#{$prefix}-#{$colorName}--hsl);
  --text-color--hover: var(--#{$prefix}-#{$colorName}--hover);
  --text-color--contrast: var(--#{$prefix}-#{$colorName}--contrast);
  color: var(--text-color, var(--text-color--contrast, inherit));
  &::selection {
    background: var(--text-color, var(--text-color--contrast, inherit));
    color: #{nok-utilities.get-contrast-color($colorValue, $color-contrast-light, $color-contrast-dark)};
  }
  &--hover {
    &:hover {
      --text-color: hsla(var(--#{$prefix}-#{$colorName}--hsl) / var(--global-color-alpha, var(--local-color-alpha, 1)));
      color: var(--text-color, var(--text-color--contrast, inherit)) !important;
    }
  }
}

@mixin border-colors($prefix, $colorName, $colorValue) {
  --border-color: hsla(var(--#{$prefix}-#{$colorName}--hsl) / var(--global-color-alpha, var(--local-color-alpha, 1)));
  --border-color-hsl: var(--#{$prefix}-#{$colorName}--hsl);
  border-color: var(--border-color, inherit);
}

@mixin input-colors($prefix, $colorName, $colorValue) {
  --input-color: hsla(var(--#{$prefix}-#{$colorName}--hsl) / var(--global-color-alpha, var(--local-color-alpha, 1)));
  --text-color: var(--input-color, inherit);
  accent-color: var(--input-color, inherit);
  caret-color: var(--input-color, inherit);
  color: var(--input-color, inherit);
  &::selection {
    background: var(--input-color, inherit);
    color: #{nok-utilities.get-contrast-color($colorValue, $color-contrast-light, $color-contrast-dark)};
  }
}

/**
 * Color style type definitions
 * Structure: .prefix-type-color(--variant)
 */
@each $color, $value in $nok-base-colors {
  $sub_map: (
      $color : $value,
      $color+'--darker' :  desaturate(darken($value, 10%), 20%),
      $color+'--lighter' :  saturate(lighten($value, 10%), 20%)
  );
  @each $color, $value in $sub_map {
    .#{nok-variables.$prefix}-bg-#{$color} {
      @include bg-colors(nok-variables.$prefix, $color, $value);
    }
    .#{nok-variables.$prefix}-text-#{$color} {
      @include text-colors(nok-variables.$prefix, $color, $value);
    }
    .#{nok-variables.$prefix}-border-#{$color} {
      @include border-colors(nok-variables.$prefix, $color, $value);
    }
    .#{nok-variables.$prefix}-input-#{$color} {
      @include input-colors(nok-variables.$prefix, $color, $value);
    }
    @media (prefers-color-scheme: dark) {
      .#{nok-variables.$prefix}-dark-bg-#{$color} {
        @include bg-colors(nok-variables.$prefix, $color, $value);
      }
      .#{nok-variables.$prefix}-dark-text-#{$color} {
        @include text-colors(nok-variables.$prefix, $color, $value);
      }
      .#{nok-variables.$prefix}-dark-border-#{$color} {
        @include border-colors(nok-variables.$prefix, $color, $value);
      }
      .#{nok-variables.$prefix}-dark-input-#{$color} {
        @include input-colors(nok-variables.$prefix, $color, $value);
      }
    }
  }
}

/**
 * Additional general color class helpers
 */
.#{nok-variables.$prefix}-text-contrast {
  color: var(--text-color--contrast, inherit) !important;
}

/**
 * Additional media queries
 */
@media (prefers-reduced-transparency) {
  :root {
    --global-color-alpha: 1 !important;
    --global-bg-color-alpha: 1 !important;
  }
}

/** Notes
 * Only use local color alpha for alpha adjustments. Global color alpha is an override used only for the media query
 * 'prefers-reduced-transparency' and should not be overridden manually (as it's the other way round).
 */