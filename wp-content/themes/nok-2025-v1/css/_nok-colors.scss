@use "sass:map";
@use "sass:color";
@import "nok-variables";

$white: #FFFFFF;
$black: #000;
$color-contrast-dark: #222;
$color-contrast-light: #FFF;
$min-contrast-ratio: 4.5;

@import "bs/5.3.3/scss/functions";

$nok-base-colors: (
    'lightblue':      #00b0e4,
	'darkblue':       #14477c,
	'darkerblue':     #001c4d,
	'darkestblue':    #00132f,
	'yellow':         #FFC425,
	'darkyellow':     #eab10d,
	'paleyellow':     #D5D59D,
	'green':          #54b085,
	'greenyellow':    #CCCC33,
	'greenblue':      #23afbf,
	'lightgreenblue': #93e1f4,
    'error':          #d82510,
	'body_bg':        #F1F5F6,
);

/* Regular color variables */
:root {
  @each $color, $value in $nok-base-colors {
    $sub_map: (
        $color : $value,
        $color+'--darker' :  desaturate(darken($value, 10%), 20%),
        $color+'--lighter' :  saturate(lighten($value, 10%), 20%)
    );
    @each $color, $value in $sub_map {
      --#{$prefix}-#{$color} :       #{$value};
      --#{$prefix}-#{$color}--h :    #{round(color.hue($value))};
      --#{$prefix}-#{$color}--s :    #{round(color.saturation($value))};
      --#{$prefix}-#{$color}--l :    #{round(color.lightness($value))};
      --#{$prefix}-#{$color}--hsl :  var(--#{$prefix}-#{$color}--h) var(--#{$prefix}-#{$color}--s) var(--#{$prefix}-#{$color}--l);
    }
  }
}

/* Dark mode color variables */
@media (prefers-color-scheme: dark) {
  :root {
  }
}

/**
 * Color style type definitions
 * Structure: .prefix-type-color(--variant)
 */
@each $color, $value in $nok-base-colors {
  $sub_map: (
      $color : $value,
      $color+'--darker' :  desaturate(darken($value, 10%), 20%),
      $color+'--lighter' :  saturate(lighten($value, 10%), 20%)
  );
  @each $color, $value in $sub_map {
    .#{$prefix}-bg-#{$color} {
      --bg-color: hsla(var(--#{$prefix}-#{$color}--h), var(--#{$prefix}-#{$color}--s), var(--#{$prefix}-#{$color}--l), var(--local-color-alpha, var(--global-color-alpha, 1)));
      --contrast-text-color: #{color-contrast($value)};
      background-color: var(--bg-color, inherit);
      &::selection {
        background: #{color-contrast($value)};
        color: var(--bg-color, inherit);
      }
    }
    .#{$prefix}-text-#{$color} {
      --text-color: hsla(var(--#{$prefix}-#{$color}--h), var(--#{$prefix}-#{$color}--s), var(--#{$prefix}-#{$color}--l), var(--local-color-alpha, var(--global-color-alpha, 1)));
      color: var(--text-color, var(--contrast-text-color, inherit));
      &::selection {
        background: var(--text-color, var(--contrast-text-color, inherit));
        color: #{color-contrast($value)};
      }
    }
    .#{$prefix}-border-#{$color} {
      --border-color: hsla(var(--#{$prefix}-#{$color}--h), var(--#{$prefix}-#{$color}--s), var(--#{$prefix}-#{$color}--l), var(--local-color-alpha, var(--global-color-alpha, 1)));
      border-color: var(--border-color, inherit);
    }
    .#{$prefix}-input-#{$color} {
      --input-color: hsla(var(--#{$prefix}-#{$color}--h), var(--#{$prefix}-#{$color}--s), var(--#{$prefix}-#{$color}--l), var(--local-color-alpha, var(--global-color-alpha, 1)));
      --text-color: var(--input-color, inherit);
      accent-color: var(--input-color, inherit);
      caret-color: var(--input-color, inherit);
      color: var(--input-color, inherit);
      &::selection {
        background: var(--input-color, inherit);
        color: #{color-contrast($value)};
      }
    }
  }
}