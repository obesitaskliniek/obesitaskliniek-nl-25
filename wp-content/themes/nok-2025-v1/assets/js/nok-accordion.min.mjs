import{ViewportScroller}from"./domule/util.ensure-visibility.mjs";import{logger}from"./domule/core.log.mjs";export const NAME="accordion";const DEFAULT_DURATION=750;const DEFAULT_EASING="cubic-bezier(0.16, 1, 0.3, 1)";const CSS_SUPPORT=CSS?CSS.supports("interpolate-size","allow-keywords"):false;const AccordionGroups=new Map;const AccordionInstances=new WeakMap;function makeGroup(){return{busy:false,accordions:new Set}}class Accordion{constructor(element){this.element=element;const computedStyle=window.getComputedStyle(this.element);
this.transitionDuration=parseInt(computedStyle.getPropertyValue("--animation-duration"))||DEFAULT_DURATION;this.transitionEasing=computedStyle.getPropertyValue("--animation-timing")||DEFAULT_EASING;this._visibilityCorrector=new ViewportScroller(element,{behavior:"smooth",extraOffset:20});if(CSS_SUPPORT)this._initNativeMode();else this._initPolyfillMode()}_initNativeMode(){this.element.addEventListener("toggle",()=>this._maintainVisibility())}_initPolyfillMode(){this.summary=this.element.querySelector("summary");
this.content=this.element.querySelector(".accordion-content");this.animation=null;this.isClosing=false;this.isExpanding=false;if(!this.summary||!this.content){logger.warn(NAME,"<details> missing <summary> or .accordion-content");return}this.summary.addEventListener("click",event=>this._toggle(event));AccordionInstances.set(this.element,this);this.name=this.element.getAttribute("name");this.groupRef=this.name||this.element;let group=AccordionGroups.get(this.groupRef);if(!group){group=makeGroup();AccordionGroups.set(this.groupRef,
group)}group.accordions.add(this.element);this.group=group;this.opened=this.element.open||false}_maintainVisibility(){const onTransitionEnd=()=>{if(!this.element.open)return;this._visibilityCorrector.ensureVisible()};this.element.addEventListener("transitionend",onTransitionEnd,{once:true});window.addEventListener("scroll",()=>{this.element.removeEventListener("transitionend",onTransitionEnd)},{once:true})}_animateHeight(startHeight,endHeight,onfinish){this.animation?.finish();this.group.busy=true;
this.animation=this.element.animate({height:[startHeight,endHeight]},{duration:this.transitionDuration,easing:this.transitionEasing,fill:"forwards"});this.animation.onfinish=()=>{this.group.busy=false;onfinish()}}_toggle(event){event.preventDefault();if(this.group.busy)return;this.element.style.overflow="hidden";if(this.isClosing||!this.element.open)this._open();else if(this.isExpanding||this.element.open)this._collapse()}_open(){this.currentScrollY=window.scrollY;if(this.group.accordions.size>1){if(this.name)this.element.removeAttribute("name");
for(const otherElement of this.group.accordions)if(otherElement!==this.element&&otherElement.open)AccordionInstances.get(otherElement)?._collapse()}this.element.style.height=`${this.element.offsetHeight}px`;this.element.open=true;window.requestAnimationFrame(()=>{window.requestAnimationFrame(()=>this._expand())})}_collapse(){this.isClosing=true;this.element.classList.add("accordion-closing");const startHeight=`${this.element.offsetHeight}px`;const endHeight=`${this.summary.offsetHeight}px`;this._animateHeight(startHeight,
endHeight,()=>this._onAnimationFinish(false))}_expand(){this.isExpanding=true;this.element.classList.remove("accordion-closing");const startHeight=`${this.element.offsetHeight}px`;const endHeight=`${this.summary.offsetHeight+this.content.offsetHeight}px`;this._animateHeight(startHeight,endHeight,()=>this._onAnimationFinish(true))}_onAnimationFinish(isOpen){this.element.open=isOpen;this.summary.setAttribute("aria-expanded",String(isOpen));this.animation=null;this.isClosing=false;this.isExpanding=false;
this.element.classList.remove("accordion-closing");this.element.style.height="";this.element.style.overflow="";if(this.name)this.element.setAttribute("name",this.name);if(isOpen&&this.currentScrollY===window.scrollY)this._visibilityCorrector.ensureVisible()}destroy(){if(!CSS_SUPPORT){this.summary?.removeEventListener("click",this._toggle);this.animation?.cancel();this.group?.accordions.delete(this.element);if(this.group?.accordions.size===0)AccordionGroups.delete(this.groupRef);AccordionInstances.delete(this.element)}}}
export function init(elements){elements.forEach(element=>{element.querySelectorAll("details").forEach(details=>{new Accordion(details)})});if(CSS_SUPPORT){logger.info(NAME,"Using native CSS interpolate-size");return"Native CSS support detected"}logger.info(NAME,"Using WAAPI polyfill")}export function destroy(){for(const [groupRef,group]of AccordionGroups.entries())for(const element of group.accordions)AccordionInstances.get(element)?.destroy();AccordionGroups.clear();logger.info(NAME,"Cleanup complete")};
