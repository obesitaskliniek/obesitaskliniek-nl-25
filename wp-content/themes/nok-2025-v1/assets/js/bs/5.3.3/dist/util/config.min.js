/*
 Bootstrap config.js v5.3.3 (https://getbootstrap.com/)
 Copyright 2011-2024 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
 Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
*/
(function(c,d){"object"===typeof exports&&"undefined"!==typeof module?module.exports=d(require("../dom/manipulator.js"),require("./index.js")):"function"===typeof define&&define.amd?define(["../dom/manipulator","./index"],d):(c="undefined"!==typeof globalThis?globalThis:c||self,c.Config=d(c.Manipulator,c.Index))})(this,function(c,d){class g{static get Default(){return{}}static get DefaultType(){return{}}static get NAME(){throw Error('You have to implement the static method "NAME", for each component!');
}_getConfig(a){a=this._mergeConfigObj(a);a=this._configAfterMerge(a);this._typeCheckConfig(a);return a}_configAfterMerge(a){return a}_mergeConfigObj(a,b){const e=d.isElement(b)?c.getDataAttribute(b,"config"):{};return{...this.constructor.Default,...("object"===typeof e?e:{}),...(d.isElement(b)?c.getDataAttributes(b):{}),...("object"===typeof a?a:{})}}_typeCheckConfig(a,b=this.constructor.DefaultType){for(const [e,f]of Object.entries(b))if(b=a[e],b=d.isElement(b)?"element":d.toType(b),!(new RegExp(f)).test(b))throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${e}" provided type "${b}" but expected type "${f}".`);
}}return g});
