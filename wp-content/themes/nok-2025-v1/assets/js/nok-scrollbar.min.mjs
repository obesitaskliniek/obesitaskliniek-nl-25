import eventHandler from"./modules/hnl.eventhandler.mjs";import{isVisible}from"./modules/hnl.helpers.mjs";import mediaInfo from"./modules/helper.media-info.mjs";export const NAME="scrollBarEmulator";function RAFThrottle(callback){let ticking=false;return(...args)=>{if(ticking)return;ticking=true;requestAnimationFrame(()=>{callback(...args);ticking=false})}}function disableSnapping(scrollElement){scrollElement.dataset.scrollSnapping="false"}function restoreSnapping(scrollElement){scrollElement.dataset.scrollSnapping=
"true"}function restoreSnappingGracefully(scrollElement){const {scrollWidth:scrollSize,scrollLeft:scrollPosition,offsetWidth:scrollerSize}=scrollElement;const snapItem=scrollElement.children[0];const gap=parseInt(window.getComputedStyle(snapItem.parentElement).columnGap,10)||0;const slideItemSize=snapItem.offsetWidth+gap;const closestSnap=Math.round(scrollPosition/slideItemSize);const tolerance=2;let timeout=null;function waitToRestoreSnapping(){clearTimeout(timeout);timeout=setTimeout(()=>{restoreSnapping(scrollElement);
scrollElement.removeEventListener("scroll",waitToRestoreSnapping)},scrollPosition%slideItemSize?150:0)}if(Math.abs(scrollPosition)<tolerance||Math.abs(scrollPosition+scrollerSize-scrollSize)<tolerance)scrollElement.removeEventListener("scroll",waitToRestoreSnapping);else{scrollElement.scrollTo({left:closestSnap*slideItemSize,behavior:"smooth"});scrollElement.addEventListener("scroll",waitToRestoreSnapping)}}export function setupFakeScrollbar(scrollElement){const SNAPPING=scrollElement.dataset.scrollSnapping===
"true";const scrollbarTrack=document.createElement("div");scrollbarTrack.className="fake-scrollbar align-self-stretch";const scrollbarThumb=document.createElement("div");scrollbarThumb.className="fake-scrollbar-thumb";scrollbarTrack.appendChild(scrollbarThumb);scrollElement.parentNode.insertBefore(scrollbarTrack,scrollElement.nextSibling);const cssSScrollStyle=window.getComputedStyle(scrollElement).overflowX;if(cssSScrollStyle==="hidden"){scrollbarTrack.style.visibility="hidden";return}const style=
{width:null,transform:null,clientWidth:null,scrollWidth:null,scrollLeft:null};function updateSelf(){const {scrollWidth,clientWidth,scrollLeft}=scrollElement;if(style.clientWidth===clientWidth&&style.scrollWidth===scrollWidth&&style.scrollLeft===scrollLeft)return;scrollbarThumb.style.visibility=scrollWidth<=clientWidth?"hidden":"";scrollbarTrack.style.visibility=scrollWidth<=clientWidth?cssSScrollStyle==="auto"?"hidden":"":"";style.clientWidth=clientWidth;style.scrollWidth=scrollWidth;style.maxScroll=
scrollWidth-clientWidth;if(style.maxScroll<=0){if(style.width!=="0px"){scrollbarThumb.style.width="0px";style.width="0px"}return}const thumbWidth=Math.round(clientWidth/scrollWidth*clientWidth);const thumbPosition=Math.round(scrollLeft/style.maxScroll*(clientWidth-thumbWidth)*10)/10;const newStyles={};if(style.scrollLeft!==scrollLeft){style.scrollLeft=scrollLeft;newStyles.transform=style.transform=`translate3d(${thumbPosition}px, 0, 0)`}if(style.width!==`${thumbWidth}px`)newStyles.width=style.width=
`${thumbWidth}px`;if(Object.keys(newStyles).length>0)Object.assign(scrollbarThumb.style,newStyles)}const updateScrollbar=RAFThrottle(updateSelf);eventHandler.addListener("docShift",updateScrollbar);scrollElement.addEventListener("scroll",updateScrollbar,{passive:true});function handlePointerUp(el,pointerId,moveFn,upFn,snapping){if(snapping)restoreSnappingGracefully(scrollElement);scrollElement.style.scrollBehavior="";scrollElement.classList.remove("being-scrolled","grabbed-scrollbar");el.releasePointerCapture(pointerId);
el.removeEventListener("pointermove",moveFn);el.removeEventListener("pointerup",upFn);el.removeEventListener("pointercancel",upFn)}function bindMoveEvents(el,move,cancel){el.addEventListener("pointermove",move);el.addEventListener("pointerup",cancel);el.addEventListener("pointercancel",cancel)}scrollbarTrack.addEventListener("pointerdown",downEvt=>{downEvt.preventDefault();if(SNAPPING)disableSnapping(scrollElement);scrollElement.style.scrollBehavior="auto";scrollElement.classList.add("being-scrolled");
scrollElement.classList.add("grabbed-scrollbar");const startX=downEvt.clientX;let startScroll=scrollElement.scrollLeft;const {scrollWidth,clientWidth}=scrollElement;const trackRect=scrollbarTrack.getBoundingClientRect();const thumbRect=scrollbarThumb.getBoundingClientRect();const maxScroll=scrollWidth-clientWidth;const maxThumbOffset=trackRect.width-thumbRect.width;if(scrollbarTrack===downEvt.target){scrollElement.dataset.scrollSnapping="false";const clickX=downEvt.clientX-trackRect.left;const halfThumb=
thumbRect.width/2;const thumbOff=Math.min(Math.max(clickX-halfThumb,0),maxThumbOffset);const newScroll=thumbOff/maxThumbOffset*maxScroll;scrollElement.scrollLeft=startScroll=newScroll}const track=downEvt.currentTarget;track.setPointerCapture(downEvt.pointerId);function onPointerMove(moveEvt){const deltaX=moveEvt.clientX-startX;const thumbPos=Math.min(Math.max(startScroll/maxScroll*maxThumbOffset+deltaX,0),maxThumbOffset);scrollElement.scrollLeft=thumbPos/maxThumbOffset*maxScroll}function onPointerUp(upEvt){handlePointerUp(track,
upEvt.pointerId,onPointerMove,onPointerUp,SNAPPING)}bindMoveEvents(track,onPointerMove,onPointerUp)});if(scrollElement.dataset.draggable==="true"&&window.PointerEvent)scrollElement.addEventListener("pointerdown",contentPointerDown,{passive:false});function contentPointerDown(e){if(e.pointerType!=="mouse")return;const origTgt=e.composedPath?e.composedPath()[0]:e.target;if(!(origTgt instanceof Element))return;const control=origTgt.closest("a, button");if(control)return;e.preventDefault();if(SNAPPING)disableSnapping(scrollElement);
scrollElement.style.scrollBehavior="auto";scrollElement.classList.add("being-scrolled");const startX=e.clientX;const startScroll=scrollElement.scrollLeft;scrollElement.setPointerCapture(e.pointerId);function onMove(moveEvt){const deltaX=moveEvt.clientX-startX;scrollElement.scrollLeft=startScroll-deltaX}function onUp(upEvt){handlePointerUp(scrollElement,upEvt.pointerId,onMove,onUp,SNAPPING)}bindMoveEvents(scrollElement,onMove,onUp)}if(scrollElement.dataset.autoscroll==="true"&&!mediaInfo("prefers-reduced-motion")){const interval=
Math.max(1E3,+scrollElement.dataset.interval||1E4);const children=Array.from(scrollElement.children);let timerId=null;let waitTimer=null;function getNextChildIndex(){const currentChildIndex=children.indexOf(children.find(child=>child.offsetLeft+child.offsetWidth>scrollElement.scrollLeft));return currentChildIndex+1<=children.length?currentChildIndex+1:0}function go(){clearInterval(timerId);timerId=setInterval(()=>{isVisible(scrollElement,function(visible){if(visible&&scrollElement.dataset.autoscroll===
"true"){const reachedEnd=Math.abs(scrollElement.scrollLeft+scrollElement.offsetWidth-scrollElement.scrollWidth)<10;scrollElement.scrollLeft=reachedEnd?0:children[getNextChildIndex()].offsetLeft}})},interval)}[scrollElement,scrollbarTrack].forEach(el=>{["pointerdown","wheel","touchstart","mouseenter","keydown"].forEach(evt=>el.addEventListener(evt,()=>{clearInterval(timerId)},{passive:true}));["mouseleave"].forEach(evt=>el.addEventListener(evt,()=>{clearInterval(waitTimer);waitTimer=setTimeout(go,
interval)},{passive:true}))});eventHandler.addListener("docShift",()=>{isVisible(scrollElement,function(visible){if(!timerId&&!visible){clearInterval(waitTimer);waitTimer=setTimeout(go,interval)}})});go()}updateScrollbar()};
