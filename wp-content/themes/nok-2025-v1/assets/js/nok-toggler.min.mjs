import{singleClick}from"./modules/hnl.clickhandlers.mjs";export const NAME="simpleToggler";class ToggleManager{constructor(){this.instances=new WeakMap}register(element,cleanup){if(!this.instances.has(element))this.instances.set(element,[]);this.instances.get(element).push(cleanup)}cleanup(elements){elements.forEach(element=>{const cleanupFns=this.instances.get(element);if(cleanupFns){cleanupFns.forEach(fn=>fn());this.instances.delete(element)}})}}const toggleManager=new ToggleManager;const ClassUtils=
{hasAny:(el,names)=>names?.some(n=>el.classList.contains(n))??false,toggleMultiple:(el,names)=>names?.forEach(n=>el.classList.toggle(n)),removeMultiple:(el,names)=>names&&el.classList.remove(...names),findWithClasses:names=>names?Array.from(document.querySelectorAll(names.map(c=>`.${c}`).join(","))):[]};const AttrUtils={hasAny:(el,names,vals)=>{if(!names||!vals)return false;return names.some((n,i)=>el.getAttribute(`data-${n}`)===(vals[i]||""))},toggleMultiple:(el,names,vals)=>{if(!names||!vals)return;
names.forEach((n,i)=>{const attr=`data-${n}`;const val=vals[i]||"";el.getAttribute(attr)===val?el.removeAttribute(attr):el.setAttribute(attr,val)})},removeMultiple:(el,names)=>names?.forEach(n=>el.removeAttribute(`data-${n}`)),findWithAttrs:(names,vals)=>{if(!names||!vals)return[];return Array.from(document.querySelectorAll(names.map((n,i)=>`[data-${n}="${vals[i]||""}"]`).join(",")))}};function swipeToClose(element,closeCallback,direction="y",min=-9999,max=0){if(!element)return()=>{};let start=0,
current=0,isDragging=false,animationFrame=null;const clamp=(v,mn,mx)=>Math.min(mx,Math.max(mn,v));const getCoords=e=>e.touches?.[0]||e.changedTouches?.[0]||e;const updateTransform=delta=>{if(animationFrame)return;animationFrame=requestAnimationFrame(()=>{element.style.transform=direction==="x"?`translate3d(${clamp(delta,min,max)}px, 0, 0)`:`translate3d(0, ${clamp(delta,min,max)}px, 0)`;animationFrame=null})};const drag=e=>{current=getCoords(e)[direction];isDragging=current!==start;if(!isDragging)return;
e.preventDefault();element.style.userSelect="none";element.style.transition="none";updateTransform(current-start)};const pointerUp=()=>{if(animationFrame){cancelAnimationFrame(animationFrame);animationFrame=null}if(isDragging){const threshold=(direction==="x"?element.clientWidth:element.clientHeight)/4;const shouldClose=Math.abs(start-current)>threshold;element.style.transition="transform 0.25s ease-out";element.addEventListener("transitionend",()=>{element.style.userSelect="";element.style.transition=
"";element.style.transform=""},{once:true});element.style.transform=shouldClose?"":"translate3d(0, 0, 0)";if(shouldClose)closeCallback(element)}cleanup();isDragging=false};const pointerDown=e=>{isDragging=false;start=getCoords(e)[direction];const moveEvent=e.type==="touchstart"?"touchmove":"mousemove";const endEvent=e.type==="touchstart"?"touchend":"mouseup";document.addEventListener(moveEvent,drag,{passive:false});document.addEventListener(endEvent,pointerUp,{passive:true})};const cleanup=()=>{document.removeEventListener("touchmove",
drag);document.removeEventListener("touchend",pointerUp);document.removeEventListener("mousemove",drag);document.removeEventListener("mouseup",pointerUp)};element.addEventListener("touchstart",pointerDown);element.addEventListener("mousedown",pointerDown);return()=>{element.removeEventListener("touchstart",pointerDown);element.removeEventListener("mousedown",pointerDown);cleanup();if(animationFrame)cancelAnimationFrame(animationFrame)}}function resolveTarget(selector,toggler,fallback){if(!selector)return fallback;
if(selector==="_self")return toggler;if(selector==="parent")return toggler.parentNode;try{return document.querySelector(selector)}catch{return fallback}}function parseConfig(toggler){const split=str=>str?.split(",").map(s=>s.trim()).filter(Boolean)||null;return{classes:{toggle:split(toggler.dataset.togglesClass),untoggle:split(toggler.dataset.untogglesClass),target:toggler.dataset.classTarget||toggler.dataset.target||null},attributes:{toggle:split(toggler.dataset.togglesAttribute),toggleValues:toggler.dataset.togglesAttributeValue?.split(",").map(s=>
s.trim())||null,untoggle:split(toggler.dataset.untogglesAttribute),untoggleValues:toggler.dataset.untogglesAttributeValue?.split(",").map(s=>s.trim())||null,target:toggler.dataset.attributeTarget||null},legacy:{toggle:split(toggler.dataset.toggles),untoggle:split(toggler.dataset.untoggles)}}}function resolveTargets(config,toggler,defaultTarget){const targets={class:null,attribute:null};if(config.classes.toggle||config.legacy.toggle&&!config.attributes.toggle)targets.class=resolveTarget(config.classes.target||
config.attributes.target,toggler,defaultTarget);else if(config.classes.untoggle&&!config.classes.target)targets.class=ClassUtils.findWithClasses(config.classes.untoggle);else if(config.classes.target)targets.class=resolveTarget(config.classes.target,toggler,defaultTarget);if(config.attributes.toggle||config.attributes.untoggle)if(config.attributes.target)targets.attribute=resolveTarget(config.attributes.target,toggler,defaultTarget);else if(config.attributes.untoggle&&config.attributes.untoggleValues)targets.attribute=
AttrUtils.findWithAttrs(config.attributes.untoggle,config.attributes.untoggleValues);return targets}class ToggleState{constructor(config,targets){this.config=config;this.targets=targets;this.isAutoTargeted={class:Array.isArray(targets.class),attribute:Array.isArray(targets.attribute)};if(config.legacy.toggle&&!config.classes.toggle)config.classes.toggle=config.legacy.toggle;if(config.legacy.untoggle&&!config.classes.untoggle)config.classes.untoggle=config.legacy.untoggle}getCurrentTargets(){return{class:this.isAutoTargeted.class&&
this.config.classes.untoggle?ClassUtils.findWithClasses(this.config.classes.untoggle):this.targets.class,attribute:this.isAutoTargeted.attribute&&this.config.attributes.untoggle&&this.config.attributes.untoggleValues?AttrUtils.findWithAttrs(this.config.attributes.untoggle,this.config.attributes.untoggleValues):this.targets.attribute}}isActive(){const targets=this.getCurrentTargets();const check=(target,fn)=>{if(!target)return false;return(Array.isArray(target)?target:[target]).some(fn)};return check(targets.class,
el=>this.config.classes.toggle&&ClassUtils.hasAny(el,this.config.classes.toggle)||this.config.classes.untoggle&&ClassUtils.hasAny(el,this.config.classes.untoggle))||check(targets.attribute,el=>this.config.attributes.toggle&&AttrUtils.hasAny(el,this.config.attributes.toggle,this.config.attributes.toggleValues)||this.config.attributes.untoggle&&AttrUtils.hasAny(el,this.config.attributes.untoggle,this.config.attributes.untoggleValues))}toggle(){const targets=this.getCurrentTargets();const process=(target,
fn)=>target&&(Array.isArray(target)?target:[target]).forEach(fn);process(targets.class,t=>{if(this.config.classes.toggle)ClassUtils.toggleMultiple(t,this.config.classes.toggle);else if(this.config.classes.untoggle&&ClassUtils.hasAny(t,this.config.classes.untoggle))ClassUtils.removeMultiple(t,this.config.classes.untoggle)});process(targets.attribute,t=>{if(this.config.attributes.toggle)AttrUtils.toggleMultiple(t,this.config.attributes.toggle,this.config.attributes.toggleValues);else if(this.config.attributes.untoggle&&
AttrUtils.hasAny(t,this.config.attributes.untoggle,this.config.attributes.untoggleValues))AttrUtils.removeMultiple(t,this.config.attributes.untoggle)})}remove(){const targets=this.getCurrentTargets();const process=(target,fn)=>target&&(Array.isArray(target)?target:[target]).forEach(fn);process(targets.class,t=>{ClassUtils.removeMultiple(t,this.config.classes.toggle);ClassUtils.removeMultiple(t,this.config.classes.untoggle)});process(targets.attribute,t=>{AttrUtils.removeMultiple(t,this.config.attributes.toggle);
AttrUtils.removeMultiple(t,this.config.attributes.untoggle)})}containsElement(element){if(!element)return false;const targets=this.getCurrentTargets();const check=target=>{if(!target)return false;return(Array.isArray(target)?target:[target]).some(t=>t===element||t.contains(element))};return check(targets.class)||check(targets.attribute)}}function createToggleHandler(toggler,defaultTarget){const config=parseConfig(toggler);const targets=resolveTargets(config,toggler,defaultTarget);const state=new ToggleState(config,
targets);if(!config.classes.toggle&&!config.classes.untoggle&&!config.attributes.toggle&&!config.attributes.untoggle&&!config.legacy.toggle&&!config.legacy.untoggle)return()=>{};if(!targets.class&&!targets.attribute)return()=>{};const autoHide=parseInt(toggler.dataset.autohide)||0;const isPermanent=toggler.dataset.togglePermanent?.toLowerCase()==="true";let autoHideTimeout=null;const cleanupFunctions=[];const handleClickOutside=event=>{const clickedInside=toggler.contains(event?.target)||state.containsElement(event?.target);
if(!event||!clickedInside){if(state.isActive()){state.remove();clearTimeout(autoHideTimeout);autoHideTimeout=null;document.removeEventListener("click",handleClickOutside)}}else if(autoHideTimeout){clearTimeout(autoHideTimeout);autoHideTimeout=setTimeout(handleClickOutside,autoHide*1E3)}};const handleToggleClick=event=>{const childClick=toggler.contains(event.target)&&event.target!==toggler;if(!toggler.contains(event.target)||toggler.dataset.noChildren&&childClick)return;state.toggle();clearTimeout(autoHideTimeout);
autoHideTimeout=null;const isToggleAction=config.classes.toggle||config.attributes.toggle||config.legacy.toggle;if(!isPermanent&&isToggleAction)document.addEventListener("click",handleClickOutside);if(autoHide>0)autoHideTimeout=setTimeout(handleClickOutside,autoHide*1E3)};cleanupFunctions.push(singleClick(toggler,handleToggleClick));if(toggler.dataset.swipeClose){const swipeTarget=document.querySelector(toggler.dataset.swipeClose);if(swipeTarget){const swipeLimits=toggler.dataset.swipeLimits?.split(",").map(Number)||
[-9999,0];const swipeDirection=toggler.dataset.swipeDirection||"y";cleanupFunctions.push(swipeToClose(swipeTarget,()=>{if(state.isActive()){state.remove();clearTimeout(autoHideTimeout);autoHideTimeout=null}},swipeDirection,...swipeLimits))}}return()=>{clearTimeout(autoHideTimeout);document.removeEventListener("click",handleClickOutside);cleanupFunctions.forEach(cleanup=>cleanup())}}export function init(elements){if(!Array.isArray(elements))return;toggleManager.cleanup(elements);elements.forEach(element=>
{if(!(element instanceof Element))return;try{element.querySelectorAll("[data-toggles],[data-untoggles],"+"[data-toggles-class],[data-untoggles-class],"+"[data-toggles-attribute],[data-untoggles-attribute]").forEach(toggler=>{toggleManager.register(element,createToggleHandler(toggler,element))})}catch(error){console.error("[ToggleModule] Error initializing togglers:",error)}})}export function cleanup(elements){toggleManager.cleanup(elements)};
