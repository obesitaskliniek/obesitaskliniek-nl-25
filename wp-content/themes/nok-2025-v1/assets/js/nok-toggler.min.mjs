import{singleClick}from"./modules/hnl.clickhandlers.mjs";export const NAME="simpleToggler";class ToggleManager{constructor(){this.instances=new WeakMap}register(element,cleanup){if(!this.instances.has(element))this.instances.set(element,[]);this.instances.get(element).push(cleanup)}cleanup(elements){elements.forEach(element=>{const cleanupFns=this.instances.get(element);if(cleanupFns){cleanupFns.forEach(fn=>fn());this.instances.delete(element)}})}}const toggleManager=new ToggleManager;const ClassUtils=
{hasAny(element,classNames){return classNames?.some(className=>element.classList.contains(className))??false},toggleMultiple(element,classNames){if(!classNames)return;classNames.forEach(className=>element.classList.toggle(className))},removeMultiple(element,classNames){if(!classNames)return;element.classList.remove(...classNames)}};function swipeToClose(element,closeCallback,direction="y",min=-9999,max=0){if(!element){console.warn("[ToggleModule] Swipe element not found");return()=>{}}let start=0,
current=0,isDragging=false;const touchOnly=false;let animationFrame=null;const clamp=(v,min,max)=>Math.min(max,Math.max(min,v));function getCoords(e){const source=e.touches?.[0]||e.changedTouches?.[0]||e;return{x:source.clientX,y:source.clientY}}function updateTransform(delta){if(animationFrame)return;animationFrame=requestAnimationFrame(()=>{const clampedDelta=clamp(delta,min,max);element.style.transform=direction==="x"?`translate3d(${clampedDelta}px, 0, 0)`:`translate3d(0, ${clampedDelta}px, 0)`;
animationFrame=null})}function drag(e){current=getCoords(e)[direction];isDragging=current!==start;if(!isDragging)return;e.preventDefault();if(element.style.userSelect!=="none")element.style.userSelect="none";element.style.transition="none";updateTransform(current-start)}function pointerUp(e){if(animationFrame){cancelAnimationFrame(animationFrame);animationFrame=null}if(isDragging){const threshold=(direction==="x"?element.clientWidth:element.clientHeight)/4;const shouldClose=Math.abs(start-current)>
threshold;element.style.transition="transform 0.25s ease-out";element.removeEventListener("transitionend",resetStyles);element.addEventListener("transitionend",resetStyles,{once:true});element.style.transform=shouldClose?"":direction==="x"?`translate3d(0, 0, 0)`:`translate3d(0, 0, 0)`;if(shouldClose)closeCallback(element)}cleanup();isDragging=false}function resetStyles(){element.style.userSelect="";element.style.transition="";element.style.transform=""}function pointerDown(e){isDragging=false;start=
getCoords(e)[direction];const moveEvent=e.type==="touchstart"?"touchmove":"mousemove";const endEvent=e.type==="touchstart"?"touchend":"mouseup";document.addEventListener(moveEvent,drag,{passive:false});document.addEventListener(endEvent,pointerUp,{passive:true})}function cleanup(){document.removeEventListener("touchmove",drag);document.removeEventListener("touchend",pointerUp);document.removeEventListener("mousemove",drag);document.removeEventListener("mouseup",pointerUp)}element.addEventListener("touchstart",
pointerDown);if(!touchOnly)element.addEventListener("mousedown",pointerDown);return()=>{element.removeEventListener("touchstart",pointerDown);element.removeEventListener("mousedown",pointerDown);cleanup();if(animationFrame)cancelAnimationFrame(animationFrame)}}function resolveTarget(targetSelector,toggler,fallback){if(!targetSelector)return fallback;switch(targetSelector){case "_self":return toggler;case "parent":return toggler.parentNode;default:try{return document.querySelector(targetSelector)}catch(error){console.warn(`[ToggleModule] Invalid selector: ${targetSelector}`);
return fallback}}}function createToggleHandler(toggler,defaultTarget){const toggles=toggler.dataset.toggles?.split(",").map(s=>s.trim()).filter(Boolean)||null;const untoggles=toggler.dataset.untoggles?.split(",").map(s=>s.trim()).filter(Boolean)||null;if(!toggles&&!untoggles){console.warn("[ToggleModule] No toggle or untoggle classes specified");return()=>{}}const autoHide=parseInt(toggler.dataset.autohide)||0;const target=resolveTarget(toggler.dataset.target,toggler,defaultTarget);const isPermanent=
toggler.dataset.togglePermanent?.toLowerCase()==="true";if(!target){console.warn("[ToggleModule] Target element not found");return()=>{}}let autoHideTimeout=null;const cleanupFunctions=[];function handleClickOutside(event){const clickedInsideTarget=target.contains(event?.target);const clickedInsideToggler=toggler.contains(event?.target);if(!event||!clickedInsideTarget&&!clickedInsideToggler){let shouldHide=false;if(toggles&&ClassUtils.hasAny(target,toggles)){ClassUtils.removeMultiple(target,toggles);
shouldHide=true}else if(untoggles&&ClassUtils.hasAny(target,untoggles)){ClassUtils.removeMultiple(target,untoggles);shouldHide=true}if(shouldHide){clearTimeout(autoHideTimeout);autoHideTimeout=null;document.removeEventListener("click",handleClickOutside)}}else if(autoHideTimeout&&(clickedInsideTarget||clickedInsideToggler)){clearTimeout(autoHideTimeout);autoHideTimeout=setTimeout(handleClickOutside,autoHide*1E3)}}function handleToggleClick(){const childClick=toggler.contains(event.target)&&event.target!==
toggler;if(!toggler.contains(event.target)||toggler.dataset.noChildren&&childClick)return;if(toggles)ClassUtils.toggleMultiple(target,toggles);else if(untoggles&&ClassUtils.hasAny(target,untoggles))ClassUtils.removeMultiple(target,untoggles);clearTimeout(autoHideTimeout);autoHideTimeout=null;if(!isPermanent)document.addEventListener("click",handleClickOutside);if(autoHide>0)autoHideTimeout=setTimeout(handleClickOutside,autoHide*1E3)}const clickCleanup=singleClick(toggler,handleToggleClick);cleanupFunctions.push(clickCleanup);
if(toggler.dataset.swipeClose){const swipeTarget=document.querySelector(toggler.dataset.swipeClose);if(swipeTarget){const swipeLimits=toggler.dataset.swipeLimits?.split(",").map(Number)||[-9999,0];const swipeDirection=toggler.dataset.swipeDirection||"y";const swipeCleanup=swipeToClose(swipeTarget,()=>{if(toggles&&ClassUtils.hasAny(target,toggles)){ClassUtils.removeMultiple(target,toggles);clearTimeout(autoHideTimeout);autoHideTimeout=null}},swipeDirection,...swipeLimits);cleanupFunctions.push(swipeCleanup)}}return()=>
{clearTimeout(autoHideTimeout);document.removeEventListener("click",handleClickOutside);cleanupFunctions.forEach(cleanup=>cleanup())}}export function init(elements){if(!Array.isArray(elements)){console.warn("[ToggleModule] Expected array of elements");return}toggleManager.cleanup(elements);elements.forEach(element=>{if(!(element instanceof Element)){console.warn("[ToggleModule] Invalid element provided");return}try{const togglers=element.querySelectorAll("[data-toggles],[data-untoggles]");togglers.forEach(toggler=>
{const cleanup=createToggleHandler(toggler,element);toggleManager.register(element,cleanup)})}catch(error){console.error("[ToggleModule] Error initializing togglers:",error)}})}export function cleanup(elements){toggleManager.cleanup(elements)};
