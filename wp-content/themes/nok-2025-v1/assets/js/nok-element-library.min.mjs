import StyleSheetCache from"./nok-element-stylesheet-cache.mjs";export const NAME="NOK Element Library";const prefix="nok25";const styleSheetLocation="../css/nok-elements";class AbstractClass extends HTMLElement{constructor(){super();this.attachShadow({mode:"open"});if(this.constructor.observedAttributes?.length)this.constructor.observedAttributes.forEach(attribute=>{Object.defineProperty(this,attribute,{get:()=>this.getAttribute(attribute),set:value=>value?this.setAttribute(attribute,value):this.removeAttribute(attribute)})});
Array.from(this.children).forEach(child=>{const clonedChild=child.cloneNode(true);this.shadowRoot.appendChild(clonedChild)});this.innerHTML="";this.loadStyles(`${styleSheetLocation}/${this.localName}.css`).then(success=>{}).catch(error=>{})}connectedCallback(){console.log(`Connected component ${this.localName}`)}async loadStyles(url){try{this.style.visibility="hidden";const sheet=await StyleSheetCache.get(url);this.shadowRoot.adoptedStyleSheets=[sheet];this.style.visibility="visible";console.log(`Rendering ${this.localName}`)}catch(error){console.error(`Error loading stylesheet for ${this.localName}:`,
error);this.style.visibility="visible"}}attributeChangedCallback(attrName,oldValue,newValue){console.log(`Getting attribute: ${attrName} for ${this.localName}: ${newValue} (was ${oldValue})`);if(newValue!==oldValue)this.setAttribute(attrName,newValue)}}class NOKSquareBlockNew extends AbstractClass{constructor(){super()}}customElements.define(`${prefix}-square-block`,NOKSquareBlockNew);
