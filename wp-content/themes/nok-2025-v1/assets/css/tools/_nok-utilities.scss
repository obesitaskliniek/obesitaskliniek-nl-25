@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass:color';

@function round_to_decimals($what, $how_many_decimals: 0) {
  $multiplier: math.pow(10, $how_many_decimals);
  @return math.max(0, math.div(math.round($what * $multiplier), $multiplier));
}

// Ascending
// Used to evaluate Sass maps like our grid breakpoints.
@mixin assert-ascending($map, $map-name) {
  $prev-key: null;
  $prev-num: null;
  @each $key, $num in $map {
    @if $prev-num == null or unit($num) == "%" or unit($prev-num) == "%" {
      // Do nothing
    } @else if not comparable($prev-num, $num) {
      @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    } @else if $prev-num >= $num {
      @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    }
    $prev-key: $key;
    $prev-num: $num;
  }
}

// Starts at zero
// Used to ensure the min-width of the lowest breakpoint starts at 0.
@mixin assert-starts-at-zero($map, $map-name: "$grid-breakpoints") {
  @if list.length(map.values($map)) > 0 {
    $values: map-values($map);
    $first-value: nth($values, 1);
    @if $first-value != 0 {
      @warn "First breakpoint in #{$map-name} must start at 0, but starts at #{$first-value}.";
    }
  }
}

// Function to convert hex to RGB
@function hex-to-rgb($color) {
  $color: color.to-space($color, rgb);
  @return color.channel($color, "red"), color.channel($color, "green"), color.channel($color, "blue");
}

// Function to calculate relative luminance for an RGB color
@function luminance($color) {
  $rgb: hex-to-rgb($color);
  $r: list.nth($rgb, 1) / 255;
  $g: list.nth($rgb, 2) / 255;
  $b: list.nth($rgb, 3) / 255;

  // Adjust each channel according to WCAG algorithm
  @each $channel in ($r, $g, $b) {
    $adjusted: if($channel <= 0.03928, $channel / 12.92, pow(($channel + 0.055) / 1.055, 2.4));
    @if $channel == $r {
      $r: $adjusted;
    } @else if $channel == $g {
      $g: $adjusted;
    } @else {
      $b: $adjusted;
    }
  }

  // Calculate the relative luminance
  @return (0.2126 * $r) + (0.7152 * $g) + (0.0722 * $b);
}

// Function to calculate the contrast ratio
@function contrast-ratio($color1, $color2) {
  $l1: luminance($color1);
  $l2: luminance($color2);
  @if $l1 > $l2 {
    @return ($l1 + 0.05) / ($l2 + 0.05);
  } @else {
    @return ($l2 + 0.05) / ($l1 + 0.05);
  }
}

// Main function to get the best contrasting color
@function get-contrast-color($color, $color-contrast-light: #ffffff, $color-contrast-dark: #000000) {
  $contrast-light: contrast-ratio($color, $color-contrast-light);
  $contrast-dark: contrast-ratio($color, $color-contrast-dark);

  @if $contrast-light > $contrast-dark {
    @return color.to-space($color-contrast-light, oklch);
  } @else {
    @return color.to-space($color-contrast-dark, oklch);
  }
}

// Replace `$search` with `$replace` in `$string`
// Used on our SVG icon backgrounds for custom forms.
//
// @author Kitty Giraudel
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

// See https://codepen.io/kevinweber/pen/dXWoRw
//
// Requires the use of quotes around data URIs.

@function escape-svg($string) {
  // Characters which are escaped by the escape-svg function
  $escaped-characters: (
          ("<", "%3c"),
          (">", "%3e"),
          ("#", "%23"),
          ("(", "%28"),
          (")", "%29"),
  ) !default;
  @if str-index($string, "data:image/svg+xml") {
    @each $char, $encoded in $escaped-characters {
      // Do not escape the url brackets
      @if str-index($string, "url(") == 1 {
        $string: url("#{str-replace(str-slice($string, 6, -3), $char, $encoded)}");
      } @else {
        $string: str-replace($string, $char, $encoded);
      }
    }
  }

  @return $string;
}

/// Shifts section width values to earlier breakpoint keys
/// @param {Map} $widths-map - Original section widths map
/// @param {Number} $shift - How many steps to shift (default: 1)
/// @param {String|null} $stop-at - Breakpoint at which to stop narrowing (default: null)
/// @return {Map} - New map with shifted values
@function shift-section-widths($widths-map, $shift: 1, $stop-at: null) {
  $keys: map.keys($widths-map);
  $values: map.values($widths-map);
  $result: ();

  $start-index: $shift + 1;

  // If stop-at specified, only include breakpoints after it
  @if $stop-at {
    $stop-index: list.index($keys, $stop-at);
    @if $stop-index and ($stop-index + 1) > $start-index {
      $start-index: $stop-index + 1;
    }
  }

  @for $i from $start-index through list.length($keys) {
    $current-key: list.nth($keys, $i);
    $previous-value: list.nth($values, $i - $shift);
    $result: map.merge($result, ($current-key: $previous-value));
  }

  @return $result;
}