@use "sass:map";
@use "sass:color";
@use "sass:list";
@use "nok-variables";
@use "tools/nok-utilities";

$white: #f3f4f9;
$black: #222;
$color-contrast-dark: #00132f; //= darkestblue
$color-contrast-light: #f3f4f9;

$generate_classes: (
    'bg' : true,
    'text': true,
    'border': true,
    'fill' : true
);

$nok-base-colors: (
    'lightblue':      #00b0e4,
	'darkblue':       #14477c,
	'darkerblue':     #0b2355,
	'darkestblue':    #00132f,
	'yellow':         #ffd41f,
	'green':          #54b085,
	'greenyellow':    #CCCC33,
	'greenblue':      #35aba5,
	'lightgreenblue': #93e1f4,
    'error':          #d82510,
    'body':           $white,
	'white':          #FFF,
	'black':          $black,
	'lightgrey':      #CCC,
);

$nok-base-colors_light: ();
$nok-base-colors_dark: ();
$nok-contrast-overrides: ();

// color names listed here will be either adjusted for dark mode (using saturation/lightness)
// or overridden in dark mode if listed both here and in $nok-dark-colors-overrides
$nok-base-colors-adjust-for-dark: (
    'body',
    'yellow',
    'green',
    'greenyellow',
    'greenblue',
    'lightgreenblue',
    'error',
);

$nok-dark-colors-overrides: (
    'body':           #00132f,
);

$nok-dark-contrast-overrides: (
    'body':           #cdd9ed,
);

@function oklch-with-custom-alpha($color, $alpha: 'var(--alpha, 1)') {
  $oklch: color.to-space($color, oklch);
  $l: color.channel($oklch, 'lightness');
  $c: color.channel($oklch, 'chroma');
  $h: color.channel($oklch, 'hue');

  @return unquote('oklch(#{$l} #{$c} #{$h} / #{$alpha})');
}

/**
 * Generates color variations for a given color.
 *
 * @param {Color} $color - The base color.
 * @param {String} $name - The name of the color.
 * @param {Number} $saturation - The saturation level of the color.
 * @return {Map} A map containing the darker and lighter variations of the color.
 */
@function generate-color-variations($color, $name, $saturation) {
  @return (
      #{$name}+'--darker': color.adjust(
              color.adjust($color, $lightness: if($saturation > 0%, -7%, -10%), $space: oklch),
          $chroma: if($saturation > 0%, 2%, 0%),
          $space: oklch
      ),
      #{$name}+'--lighter': color.adjust(
              color.adjust($color, $lightness: if($saturation > 0%, 7%, 10%), $space: oklch),
          $chroma: if($saturation > 0%, 2%, 0%),
          $space: oklch
      )
  );
}

// Generate light color variations for each base color
@each $name, $color in $nok-base-colors {
  $saturation: color.channel(color.to-space($color, hsl), "saturation", $space: hsl);
  $color: color.to-space($color, oklch);

  $nok-base-colors_light: map.merge($nok-base-colors_light, map.merge(
          ($name: $color),
          generate-color-variations($color, $name, $saturation)
  ));
}

// Update the base colors to the generated light color variations
$nok-base-colors: $nok-base-colors_light;

// Generate dark color variations for each base color that needs adjustment for dark mode
// determined by colors listed in $nok-base-colors-adjust-for-dark
@each $name in $nok-base-colors-adjust-for-dark {
  $color: if(map-has-key($nok-dark-colors-overrides, $name),
      color.to-space(map.get($nok-dark-colors-overrides, $name), oklch),
      map.get($nok-base-colors, $name+'--darker') //dark variants are based on the '--darker' variants from the light color subset
  );

  @if ($color) {
    $saturation: color.channel(color.to-space($color, hsl), "saturation", $space: hsl);
    $nok-base-colors_dark: map.merge($nok-base-colors_dark, map.merge(
            ($name: $color),
            generate-color-variations($color, $name, $saturation)
    ));
  }
}

@mixin set-color-variables($color-map) {
  $oklch_variables: ();
  @each $name, $color in $color-map {
    $rgb_color: color.to-space($color, rgb);
    $rgb_string: #{color.channel($rgb_color, 'red')}, #{color.channel($rgb_color, 'green')}, #{color.channel($rgb_color, 'blue')};
    $rgb_color_contrast: color.to-space(nok-utilities.get-contrast-color($color, $color-contrast-light, $color-contrast-dark), rgb);
    $rgb_string_contrast: #{color.channel($rgb_color_contrast, 'red')}, #{color.channel($rgb_color_contrast, 'green')}, #{color.channel($rgb_color_contrast, 'blue')};
    --#{nok-variables.$prefix}-#{$name}: rgb(#{$rgb_string});
    --#{nok-variables.$prefix}-#{$name}-rgba: rgba(var(--#{nok-variables.$prefix}-#{$name}), var(--alpha, 1));
    --#{nok-variables.$prefix}-#{$name}-contrast: rgba(#{$rgb_string_contrast}, var(--alpha, 1));
    $oklch_variables: map.merge($oklch_variables, (
            "--#{nok-variables.$prefix}-#{$name}-rgb": $rgb_string,
            "--#{nok-variables.$prefix}-#{$name}": $color,
            "--#{nok-variables.$prefix}-#{$name}-contrast": nok-utilities.get-contrast-color($color, $color-contrast-light, $color-contrast-dark)
    ));
  }
  @supports (color: oklch(0% 0 0)) {
    @each $property, $value in $oklch_variables {
      #{$property}: #{$value};
    }
  }
}

/* Normal (and dark unless overridden) mode color variables */
:root {
  @include set-color-variables($nok-base-colors_light);
}

/* Dark mode color variables */
@media (prefers-color-scheme: dark) {
  :root {
    @include set-color-variables($nok-base-colors_dark);
  }
}

// Generate the background and text color classes
$selectors: ('bg' : (), 'text' : (), 'border' : (), 'fill' : ());
$alpha_values: ();
@each $type, $selector in $selectors {
  $alpha_values: map.set($alpha_values, $type, var(--global-#{$type}-alpha-value, var(--#{$type}-alpha-value, 1)));
}

$dark_mode_rules: ();
@each $name, $color in $nok-base-colors {
  @each $type, $selector in $selectors {
    @if (map.get($generate_classes, $type)) {
      $selectors: map.set($selectors, $type, list.append(map.get($selectors, $type), ".#{nok-variables.$prefix}-#{$type}-#{$name}", comma));
      $selectors: map.set($selectors, $type, list.append(map.get($selectors, $type), ".#{nok-variables.$prefix}-dark-#{$type}-#{$name}", comma));
      .#{nok-variables.$prefix}-#{$type}-#{$name} {
        --#{$type}-base: var(--#{nok-variables.$prefix}-#{$name});
        --#{$type}-base-contrast: var(--#{nok-variables.$prefix}-#{$name}-contrast);
      }
      $dark_mode_rules: map.merge($dark_mode_rules, (
              "body .#{nok-variables.$prefix}-dark-#{$type}-#{$name}": (
                      "--#{$type}-base": "var(--#{nok-variables.$prefix}-#{$name})",
                      "--#{$type}-base-contrast": "var(--#{nok-variables.$prefix}-#{$name}-contrast)"
              )
      ));
    }
  }
}

// Make sure we output the dark mode rules in one go, for clarity
@media (prefers-color-scheme: dark) {
  @each $selector, $properties in $dark_mode_rules {
    #{$selector} {
      @each $property, $value in $properties {
        #{$property}: #{$value};
      }
    }
  }
}

@mixin basic_variables($type, $alpha_values) {
  //--#{$type}-alpha-value: 1;
  --#{$type}-color: oklch(from var(--#{$type}-base) l c h / #{map.get($alpha_values, $type)});
}

@mixin extended_variables($type, $alpha_values) {
  --#{$type}-color--contrast: oklch(from var(--#{$type}-base-contrast) l c h / #{map.get($alpha_values, 'text')});
  --#{$type}-color--hover: oklch(from var(--#{$type}-base) calc(l * 1.25) calc(c * 0.9) h / #{map.get($alpha_values, $type)});
  --#{$type}-color--active: oklch(from var(--#{$type}-base) calc(l * 1.05) calc(c * 1.1) h / #{map.get($alpha_values, $type)});
  --#{$type}-color--grayscale: oklch(from var(--#{$type}-base) l 0 h / #{map.get($alpha_values, $type)});
}

@each $type, $selector in $selectors {
  @if ($selector != ()) {
    #{$selector} {
      @if($type == 'bg') {
        @include basic_variables($type, $alpha_values);
        @include extended_variables($type, $alpha_values);
        background-color: oklch(from var(--bg-color, inherit) l c h / #{map.get($alpha_values, 'bg')});
        color: var(--text-color, oklch(from var(--bg-color--contrast, inherit) l c h / #{map.get($alpha_values, 'bg')}));
      }
      @if($type == 'text') {
        @include basic_variables($type, $alpha_values);
        @include extended_variables($type, $alpha_values);
        color: var(--text-color, oklch(from var(--bg-color--contrast, inherit) l c h / #{map.get($alpha_values, 'text')}));
      }
      @if($type == 'border') {
        @include basic_variables($type, $alpha_values);
        @include extended_variables($type, $alpha_values);
        border-color: oklch(from var(--border-color, inherit) l c h / #{map.get($alpha_values, 'border')});
      }
      @if($type == 'fill') {
        @include basic_variables($type, $alpha_values);
        fill: oklch(from var(--fill-color, inherit) l c h / #{map.get($alpha_values, 'fill')});
        color: oklch(from var(--fill-color, inherit) l c h / #{map.get($alpha_values, 'fill')});
      }
    }
  }
}

/**
 * Additional general color class helpers
 */
body { //helps increase specificity
  .#{nok-variables.$prefix}-text-universal-contrast {
    color: #888E !important;
  }
  .#{nok-variables.$prefix}-text-contrast {
    --text-color: var(--bg-color--contrast, inherit) !important;
  }
  .#{nok-variables.$prefix}-fill-contrast {
    fill: var(--bg-color--contrast, inherit) !important;
  }
  @media (prefers-color-scheme: dark) {
    .#{nok-variables.$prefix}-dark-text-contrast {
      --text-color: var(--bg-color--contrast, inherit) !important;
    }
    .#{nok-variables.$prefix}-dark-fill-contrast {
      fill: var(--bg-color--contrast, inherit) !important;
    }
  }
}


/**
 * Additional media queries
 */
@media (prefers-reduced-transparency) {
  :root {
    @each $type, $selector in $selectors {
      --global-#{$type}-alpha-value: 1 !important;
    }
  }
}

/** Notes
 * Only use local color alpha (i.e. --text-alpha-value, --bg-alpha-value) for alpha adjustments.
 * Global color alpha is an override used only for the media query
 * 'prefers-reduced-transparency' and should not be overridden manually (as it's the other way round).
 */

/**
 * Gradients
 */
.#{nok-variables.$prefix}-gradient-1 {
  --color-from: rgba(var(--nok-darkblue--darker-rgb), 0.25);
  --color-to: rgba(var(--nok-lightblue--darker-rgb), 0.15);

  background: radial-gradient(circle at 50% 100%,
          var(--color-from),
          var(--color-to) 75%
  ),  var(--nok-body);

  @media (prefers-color-scheme: dark) {
    --color-from: oklch(0.15 0.02 250.61);
    --color-to: oklch(0.27 0.04 252.45);
  }
  @supports (color: oklch(0% 0 0)) {
    --base-color: var(--nok-darkblue-rgb);
    --color-from: oklch(from rgb(var(--base-color)) 0.8 0.025 h/1);
    --color-to: oklch(from rgb(var(--base-color)) 0.95 0.035 h/1);
    @media (prefers-color-scheme: dark) {
      --color-from: oklch(0.15 0.02 250.61);
      --color-to: oklch(0.27 0.04 252.45);
    }
  }
}