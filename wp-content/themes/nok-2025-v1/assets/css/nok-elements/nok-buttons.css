/**
    * Mixin to apply styles when the DOM is fully loaded.
    * By hnldesign - 2025
    *
    * This mixin targets elements when the `body` element has the `domready` class,
    * indicating that the DOM is fully loaded and parsed.
    *
    * Usage:
    * @include domready {
    *   // Your styles here
    * }
 */
/*!
 * Baseline Grid CSS v2.0.0 - 26-8-2025
 * Mixin to apply a baseline grid to an element and its children
 * Copyright (c) 2022-2025 hnldesign. All rights reserved.
 * See https://hnldesign.hashnode.dev/setting-a-flexible-baseline-grid-in-css
 *
 * You can set --fs-threshold-ratio (per element) to determine the point at which the baseline doubles (or triples etc) in size.
 * The default is at 0.8, which means that if the font-size is over 80% of the line-height, the baseline will double.
 * Valid values are between 0 and 1 (will be clamped).
 */
/**
 * square block
 */
.nok-button {
  --flex-gap: calc(var(--nok-padding-base, 1.5rem) / 2);
  --bg-alpha-value: 1;
  box-sizing: border-box;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  margin: 0;
  padding: var(--flex-gap) calc(var(--flex-gap) * 2);
  gap: var(--flex-gap, 0.75rem);
  white-space: nowrap;
  overflow: hidden;
  font-family: var(--nok-heading-font-family, "Realist", Arial, Helvetica, sans-serif);
  font-size-adjust: var(--nok-heading-font-size-adjust, 0.444);
  -webkit-text-size-adjust: 100%;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  text-rendering: optimizelegibility;
  font-optical-sizing: auto;
  font-style: normal;
  font-weight: 500;
  font-weight: 500;
  font-size: var(--nok-font-size-buttons, 1.25rem);
  line-height: 1.5;
  text-decoration: none;
  color: var(--bg-color--contrast, var(--text-color, inherit));
  overflow: hidden;
  border-radius: var(--nok-default-border-radius, 0.4rem);
}
.nok-button:not(.no-shadow) {
  box-shadow: 0 0 0 0 hsla(0, 0%, 0%, 0);
}
.nok-button:not(.no-shadow):hover, .nok-button:not(.no-shadow):focus {
  box-shadow: 0 0.4rem 0.1rem -0.3rem hsla(0, 0%, 50%, 0.15);
}
.nok-button {
  border: 0 solid rgba(136, 136, 136, 0);
  outline: 0 none;
  cursor: pointer;
  -webkit-user-select: none;
     -moz-user-select: none;
          user-select: none;
  touch-action: manipulation;
}
.nok-button:hover, .nok-button:focus, .nok-button:active, .nok-button.active, .nok-button:focus-visible {
  border-color: rgba(136, 136, 136, 0.1333333333);
}
.nok-button:hover {
  --text-alpha-value: 1;
  color: var(--bg-color--contrast, inherit);
  background-color: var(--bg-color--hover, inherit);
}
.nok-button:focus {
  outline: 2px solid hsl(var(--bg-color-hsl, 0deg 100% 50%)/0.25);
}
.nok-button:focus-visible {
  box-shadow: 0 0 0px 4px var(--nok-yellow);
  outline: 2px solid #FFF;
}
@media (prefers-reduced-motion: no-preference) {
  body.__enable-transitions .nok-button:focus-visible, body.no-js .nok-button:focus-visible {
    transition: box-shadow 0.6s cubic-bezier(0.16, 1, 0.3, 1);
  }
}
.nok-button:active, .nok-button.active {
  background-color: var(--bg-color--active, inherit);
}
.nok-button:disabled, .nok-button.disabled {
  --text-alpha-value: 0.65;
  opacity: 0.8;
  color: var(--text-color-button, var(--text-color--contrast, inherit));
  pointer-events: none;
}
.nok-button--small {
  --flex-gap: calc(var(--nok-padding-base, 1.5rem) / 4);
  font-size: calc(var(--nok-font-size-buttons, 1.25rem) * 0.8);
}
.nok-button-menu {
  --bg-size: 55%;
  background-repeat: no-repeat;
  background-position: center;
  background-size: var(--bg-size);
  vertical-align: middle;
  aspect-ratio: 1/1;
  position: relative;
}
.nok-button-menu svg {
  position: absolute;
  width: var(--bg-size);
  height: var(--bg-size);
}
.nok-button-menu svg .closed {
  display: none;
}
.nok-button-group {
  display: grid;
  grid-template-rows: 1fr;
  grid-template-columns: 1fr 1fr;
  width: 100%;
  gap: var(--grid-gap, var(--nok-padding-base, var(--nok-global-grid-gap, 1.5rem)));
  align-items: center;
  justify-items: center;
  font-size: var(--nok-font-size-buttons, 1.25rem);
}
.nok-button-group > button.fill-group-column {
  width: 100%;
}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vay1idXR0b25zLnNjc3MiLCJub2stYnV0dG9ucy5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBV0E7Ozs7Ozs7Ozs7O0VDQUU7QUFDRjs7Ozs7Ozs7O0VBU0U7QUFDRjs7RUFFRTtBQUNGO0VBQ0UscURBQXFEO0VBQ3JELG1CQUFtQjtFQUNuQixzQkFBc0I7RUFDdEIsb0JBQW9CO0VBQ3BCLG1CQUFtQjtFQUNuQix1QkFBdUI7RUFDdkIsU0FBUztFQUNULGtEQUFrRDtFQUNsRCw2QkFBNkI7RUFDN0IsbUJBQW1CO0VBQ25CLGdCQUFnQjtFQUNoQixvRkFBb0Y7RUFDcEYsNERBQTREO0VBQzVELDhCQUE4QjtFQUM5Qiw2Q0FBNkM7RUFDN0Msa0NBQWtDO0VBQ2xDLHlCQUF5QjtFQUN6QixrQkFBa0I7RUFDbEIsZ0JBQWdCO0VBQ2hCLGdCQUFnQjtFQUNoQixnREFBZ0Q7RUFDaEQsZ0JBQWdCO0VBQ2hCLHFCQUFxQjtFQUNyQiw0REFBNEQ7RUFDNUQsZ0JBQWdCO0VBQ2hCLHVEQUF1RDtBQUN6RDtBQUNBO0VBQ0Usc0NBQXNDO0FBQ3hDO0FBQ0E7RUFDRSwwREFBMEQ7QUFDNUQ7QUFDQTtFQUNFLHNDQUFzQztFQUN0QyxlQUFlO0VBQ2YsZUFBZTtFQUNmLHlCQUFpQjtLQUFqQixzQkFBaUI7VUFBakIsaUJBQWlCO0VBQ2pCLDBCQUEwQjtBQUM1QjtBQUNBO0VBQ0UsK0NBQStDO0FBQ2pEO0FBQ0E7RUFDRSxxQkFBcUI7RUFDckIseUNBQXlDO0VBQ3pDLGlEQUFpRDtBQUNuRDtBQUNBO0VBQ0UsK0RBQStEO0FBQ2pFO0FBQ0E7RUFDRSx5Q0FBeUM7RUFDekMsdUJBQXVCO0FBQ3pCO0FBQ0E7RUFDRTtJQUNFLHlEQUF5RDtFQUMzRDtBQUNGO0FBQ0E7RUFDRSxrREFBa0Q7QUFDcEQ7QUFDQTtFQUNFLHdCQUF3QjtFQUN4QixZQUFZO0VBQ1oscUVBQXFFO0VBQ3JFLG9CQUFvQjtBQUN0QjtBQUNBO0VBQ0UscURBQXFEO0VBQ3JELDREQUE0RDtBQUM5RDtBQUNBO0VBQ0UsY0FBYztFQUNkLDRCQUE0QjtFQUM1QiwyQkFBMkI7RUFDM0IsK0JBQStCO0VBQy9CLHNCQUFzQjtFQUN0QixpQkFBaUI7RUFDakIsa0JBQWtCO0FBQ3BCO0FBQ0E7RUFDRSxrQkFBa0I7RUFDbEIscUJBQXFCO0VBQ3JCLHNCQUFzQjtBQUN4QjtBQUNBO0VBQ0UsYUFBYTtBQUNmO0FBQ0E7RUFDRSxhQUFhO0VBQ2IsdUJBQXVCO0VBQ3ZCLDhCQUE4QjtFQUM5QixXQUFXO0VBQ1gsaUZBQWlGO0VBQ2pGLG1CQUFtQjtFQUNuQixxQkFBcUI7RUFDckIsZ0RBQWdEO0FBQ2xEO0FBQ0E7RUFDRSxXQUFXO0FBQ2IiLCJmaWxlIjoibm9rLWJ1dHRvbnMuY3NzIiwic291cmNlc0NvbnRlbnQiOltudWxsLCIvKipcbiAgICAqIE1peGluIHRvIGFwcGx5IHN0eWxlcyB3aGVuIHRoZSBET00gaXMgZnVsbHkgbG9hZGVkLlxuICAgICogQnkgaG5sZGVzaWduIC0gMjAyNVxuICAgICpcbiAgICAqIFRoaXMgbWl4aW4gdGFyZ2V0cyBlbGVtZW50cyB3aGVuIHRoZSBgYm9keWAgZWxlbWVudCBoYXMgdGhlIGBkb21yZWFkeWAgY2xhc3MsXG4gICAgKiBpbmRpY2F0aW5nIHRoYXQgdGhlIERPTSBpcyBmdWxseSBsb2FkZWQgYW5kIHBhcnNlZC5cbiAgICAqXG4gICAgKiBVc2FnZTpcbiAgICAqIEBpbmNsdWRlIGRvbXJlYWR5IHtcbiAgICAqICAgLy8gWW91ciBzdHlsZXMgaGVyZVxuICAgICogfVxuICovXG4vKiFcbiAqIEJhc2VsaW5lIEdyaWQgQ1NTIHYyLjAuMCAtIDI2LTgtMjAyNVxuICogTWl4aW4gdG8gYXBwbHkgYSBiYXNlbGluZSBncmlkIHRvIGFuIGVsZW1lbnQgYW5kIGl0cyBjaGlsZHJlblxuICogQ29weXJpZ2h0IChjKSAyMDIyLTIwMjUgaG5sZGVzaWduLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU2VlIGh0dHBzOi8vaG5sZGVzaWduLmhhc2hub2RlLmRldi9zZXR0aW5nLWEtZmxleGlibGUtYmFzZWxpbmUtZ3JpZC1pbi1jc3NcbiAqXG4gKiBZb3UgY2FuIHNldCAtLWZzLXRocmVzaG9sZC1yYXRpbyAocGVyIGVsZW1lbnQpIHRvIGRldGVybWluZSB0aGUgcG9pbnQgYXQgd2hpY2ggdGhlIGJhc2VsaW5lIGRvdWJsZXMgKG9yIHRyaXBsZXMgZXRjKSBpbiBzaXplLlxuICogVGhlIGRlZmF1bHQgaXMgYXQgMC44LCB3aGljaCBtZWFucyB0aGF0IGlmIHRoZSBmb250LXNpemUgaXMgb3ZlciA4MCUgb2YgdGhlIGxpbmUtaGVpZ2h0LCB0aGUgYmFzZWxpbmUgd2lsbCBkb3VibGUuXG4gKiBWYWxpZCB2YWx1ZXMgYXJlIGJldHdlZW4gMCBhbmQgMSAod2lsbCBiZSBjbGFtcGVkKS5cbiAqL1xuLyoqXG4gKiBzcXVhcmUgYmxvY2tcbiAqL1xuLm5vay1idXR0b24ge1xuICAtLWZsZXgtZ2FwOiBjYWxjKHZhcigtLW5vay1wYWRkaW5nLWJhc2UsIDEuNXJlbSkgLyAyKTtcbiAgLS1iZy1hbHBoYS12YWx1ZTogMTtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IHZhcigtLWZsZXgtZ2FwKSBjYWxjKHZhcigtLWZsZXgtZ2FwKSAqIDIpO1xuICBnYXA6IHZhcigtLWZsZXgtZ2FwLCAwLjc1cmVtKTtcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgZm9udC1mYW1pbHk6IHZhcigtLW5vay1oZWFkaW5nLWZvbnQtZmFtaWx5LCBcIlJlYWxpc3RcIiwgQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZik7XG4gIGZvbnQtc2l6ZS1hZGp1c3Q6IHZhcigtLW5vay1oZWFkaW5nLWZvbnQtc2l6ZS1hZGp1c3QsIDAuNDQ0KTtcbiAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiAxMDAlO1xuICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMCk7XG4gIHRleHQtcmVuZGVyaW5nOiBvcHRpbWl6ZWxlZ2liaWxpdHk7XG4gIGZvbnQtb3B0aWNhbC1zaXppbmc6IGF1dG87XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgZm9udC1zaXplOiB2YXIoLS1ub2stZm9udC1zaXplLWJ1dHRvbnMsIDEuMjVyZW0pO1xuICBsaW5lLWhlaWdodDogMS41O1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIGNvbG9yOiB2YXIoLS1iZy1jb2xvci0tY29udHJhc3QsIHZhcigtLXRleHQtY29sb3IsIGluaGVyaXQpKTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgYm9yZGVyLXJhZGl1czogdmFyKC0tbm9rLWRlZmF1bHQtYm9yZGVyLXJhZGl1cywgMC40cmVtKTtcbn1cbi5ub2stYnV0dG9uOm5vdCgubm8tc2hhZG93KSB7XG4gIGJveC1zaGFkb3c6IDAgMCAwIDAgaHNsYSgwLCAwJSwgMCUsIDApO1xufVxuLm5vay1idXR0b246bm90KC5uby1zaGFkb3cpOmhvdmVyLCAubm9rLWJ1dHRvbjpub3QoLm5vLXNoYWRvdyk6Zm9jdXMge1xuICBib3gtc2hhZG93OiAwIDAuNHJlbSAwLjFyZW0gLTAuM3JlbSBoc2xhKDAsIDAlLCA1MCUsIDAuMTUpO1xufVxuLm5vay1idXR0b24ge1xuICBib3JkZXI6IDAgc29saWQgcmdiYSgxMzYsIDEzNiwgMTM2LCAwKTtcbiAgb3V0bGluZTogMCBub25lO1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIHVzZXItc2VsZWN0OiBub25lO1xuICB0b3VjaC1hY3Rpb246IG1hbmlwdWxhdGlvbjtcbn1cbi5ub2stYnV0dG9uOmhvdmVyLCAubm9rLWJ1dHRvbjpmb2N1cywgLm5vay1idXR0b246YWN0aXZlLCAubm9rLWJ1dHRvbi5hY3RpdmUsIC5ub2stYnV0dG9uOmZvY3VzLXZpc2libGUge1xuICBib3JkZXItY29sb3I6IHJnYmEoMTM2LCAxMzYsIDEzNiwgMC4xMzMzMzMzMzMzKTtcbn1cbi5ub2stYnV0dG9uOmhvdmVyIHtcbiAgLS10ZXh0LWFscGhhLXZhbHVlOiAxO1xuICBjb2xvcjogdmFyKC0tYmctY29sb3ItLWNvbnRyYXN0LCBpbmhlcml0KTtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmctY29sb3ItLWhvdmVyLCBpbmhlcml0KTtcbn1cbi5ub2stYnV0dG9uOmZvY3VzIHtcbiAgb3V0bGluZTogMnB4IHNvbGlkIGhzbCh2YXIoLS1iZy1jb2xvci1oc2wsIDBkZWcgMTAwJSA1MCUpLzAuMjUpO1xufVxuLm5vay1idXR0b246Zm9jdXMtdmlzaWJsZSB7XG4gIGJveC1zaGFkb3c6IDAgMCAwcHggNHB4IHZhcigtLW5vay15ZWxsb3cpO1xuICBvdXRsaW5lOiAycHggc29saWQgI0ZGRjtcbn1cbkBtZWRpYSAocHJlZmVycy1yZWR1Y2VkLW1vdGlvbjogbm8tcHJlZmVyZW5jZSkge1xuICBib2R5Ll9fZW5hYmxlLXRyYW5zaXRpb25zIC5ub2stYnV0dG9uOmZvY3VzLXZpc2libGUsIGJvZHkubm8tanMgLm5vay1idXR0b246Zm9jdXMtdmlzaWJsZSB7XG4gICAgdHJhbnNpdGlvbjogYm94LXNoYWRvdyAwLjZzIGN1YmljLWJlemllcigwLjE2LCAxLCAwLjMsIDEpO1xuICB9XG59XG4ubm9rLWJ1dHRvbjphY3RpdmUsIC5ub2stYnV0dG9uLmFjdGl2ZSB7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJnLWNvbG9yLS1hY3RpdmUsIGluaGVyaXQpO1xufVxuLm5vay1idXR0b246ZGlzYWJsZWQsIC5ub2stYnV0dG9uLmRpc2FibGVkIHtcbiAgLS10ZXh0LWFscGhhLXZhbHVlOiAwLjY1O1xuICBvcGFjaXR5OiAwLjg7XG4gIGNvbG9yOiB2YXIoLS10ZXh0LWNvbG9yLWJ1dHRvbiwgdmFyKC0tdGV4dC1jb2xvci0tY29udHJhc3QsIGluaGVyaXQpKTtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG59XG4ubm9rLWJ1dHRvbi0tc21hbGwge1xuICAtLWZsZXgtZ2FwOiBjYWxjKHZhcigtLW5vay1wYWRkaW5nLWJhc2UsIDEuNXJlbSkgLyA0KTtcbiAgZm9udC1zaXplOiBjYWxjKHZhcigtLW5vay1mb250LXNpemUtYnV0dG9ucywgMS4yNXJlbSkgKiAwLjgpO1xufVxuLm5vay1idXR0b24tbWVudSB7XG4gIC0tYmctc2l6ZTogNTUlO1xuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7XG4gIGJhY2tncm91bmQtc2l6ZTogdmFyKC0tYmctc2l6ZSk7XG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIGFzcGVjdC1yYXRpbzogMS8xO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG4ubm9rLWJ1dHRvbi1tZW51IHN2ZyB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgd2lkdGg6IHZhcigtLWJnLXNpemUpO1xuICBoZWlnaHQ6IHZhcigtLWJnLXNpemUpO1xufVxuLm5vay1idXR0b24tbWVudSBzdmcgLmNsb3NlZCB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG4ubm9rLWJ1dHRvbi1ncm91cCB7XG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGdyaWQtdGVtcGxhdGUtcm93czogMWZyO1xuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnI7XG4gIHdpZHRoOiAxMDAlO1xuICBnYXA6IHZhcigtLWdyaWQtZ2FwLCB2YXIoLS1ub2stcGFkZGluZy1iYXNlLCB2YXIoLS1ub2stZ2xvYmFsLWdyaWQtZ2FwLCAxLjVyZW0pKSk7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcbiAgZm9udC1zaXplOiB2YXIoLS1ub2stZm9udC1zaXplLWJ1dHRvbnMsIDEuMjVyZW0pO1xufVxuLm5vay1idXR0b24tZ3JvdXAgPiBidXR0b24uZmlsbC1ncm91cC1jb2x1bW4ge1xuICB3aWR0aDogMTAwJTtcbn1cblxuLyojIHNvdXJjZU1hcHBpbmdVUkw9bm9rLWJ1dHRvbnMuY3NzLm1hcCAqL1xuIl19 */