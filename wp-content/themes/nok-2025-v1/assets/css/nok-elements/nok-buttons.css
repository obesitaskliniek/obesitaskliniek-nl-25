/*!
 * Baseline Grid CSS v2.0.0 - 26-8-2025
 * Mixin to apply a baseline grid to an element and its children
 * Copyright (c) 2022-2025 hnldesign. All rights reserved.
 * See https://hnldesign.hashnode.dev/setting-a-flexible-baseline-grid-in-css
 *
 * You can set --fs-threshold-ratio (per element) to determine the point at which the baseline doubles (or triples etc) in size.
 * The default is at 0.8, which means that if the font-size is over 80% of the line-height, the baseline will double.
 * Valid values are between 0 and 1 (will be clamped).
 */
/**
 * square block
 */
.nok-button {
  --flex-gap: calc(var(--nok-padding-base, 1.5rem) / 2);
  --bg-alpha-value: 1;
  box-sizing: border-box;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  margin: 0;
  padding: var(--flex-gap) calc(var(--flex-gap) * 2);
  gap: var(--flex-gap, 0.75rem);
  white-space: nowrap;
  overflow: hidden;
  font-family: var(--nok-heading-font-family, "Realist", Arial, Helvetica, sans-serif);
  font-size-adjust: var(--nok-heading-font-size-adjust, 0.444);
  -webkit-text-size-adjust: 100%;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  text-rendering: optimizelegibility;
  font-optical-sizing: auto;
  font-style: normal;
  font-weight: 500;
  font-weight: 500;
  font-size: var(--nok-font-size-buttons, 1.25rem);
  line-height: 1.5;
  text-decoration: none;
  color: var(--bg-color--contrast, var(--text-color, inherit));
  overflow: hidden;
  border-radius: var(--nok-default-border-radius, 0.4rem);
  border: 0 solid rgba(136, 136, 136, 0);
  outline: 0 none;
  cursor: pointer;
  -webkit-user-select: none;
     -moz-user-select: none;
          user-select: none;
  touch-action: manipulation;
}
.nok-button:not(.no-shadow) {
  box-shadow: 0 0 0 0 hsla(0, 0%, 0%, 0);
}
.nok-button:not(.no-shadow):hover, .nok-button:not(.no-shadow):focus {
  box-shadow: 0 0.4rem 0.1rem -0.3rem hsla(0, 0%, 50%, 0.15);
}
.nok-button:hover, .nok-button:focus, .nok-button:active, .nok-button.active, .nok-button:focus-visible {
  border-color: rgba(136, 136, 136, 0.1333333333);
}
.nok-button:hover {
  --text-alpha-value: 1;
  color: var(--bg-color--contrast, inherit);
  background-color: var(--bg-color--hover, inherit);
}
.nok-button:focus {
  outline: 2px solid hsl(var(--bg-color-hsl, 0deg 100% 50%)/0.25);
}
.nok-button:focus-visible {
  box-shadow: 0 0 0px 4px var(--nok-yellow);
  outline: 2px solid #FFF;
  will-change: box-shadow;
}
@media (prefers-reduced-motion: no-preference) {
  body.__enable-transitions .nok-button:focus-visible, body.no-js .nok-button:focus-visible {
    transition: box-shadow 0.6s cubic-bezier(0.16, 1, 0.3, 1);
  }
}
.nok-button:active, .nok-button.active {
  background-color: var(--bg-color--active, inherit);
}
.nok-button:disabled, .nok-button.disabled {
  --text-alpha-value: 0.65;
  opacity: 0.8;
  color: var(--text-color-button, var(--text-color--contrast, inherit));
  pointer-events: none;
}
.nok-button--small {
  --flex-gap: calc(var(--nok-padding-base, 1.5rem) / 4);
  font-size: calc(var(--nok-font-size-buttons, 1.25rem) * 0.8);
}
.nok-button-menu {
  --bg-size: 55%;
  background-repeat: no-repeat;
  background-position: center;
  background-size: var(--bg-size);
  vertical-align: middle;
  aspect-ratio: 1/1;
  position: relative;
}
.nok-button-menu svg {
  position: absolute;
  width: var(--bg-size);
  height: var(--bg-size);
}
.nok-button-menu svg .closed {
  display: none;
}
.nok-button-group {
  display: grid;
  grid-template-rows: 1fr;
  grid-template-columns: 1fr 1fr;
  width: 100%;
  gap: var(--grid-gap, var(--nok-padding-base, var(--nok-global-grid-gap, 1.5rem)));
  align-items: center;
  justify-items: center;
  font-size: var(--nok-font-size-buttons, 1.25rem);
}
.nok-button-group > button.fill-group-column {
  width: 100%;
}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vay1idXR0b25zLnNjc3MiLCJub2stYnV0dG9ucy5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBV0E7Ozs7Ozs7OztFQ0ZFO0FBQ0Y7O0VBRUU7QUFDRjtFQUNFLHFEQUFxRDtFQUNyRCxtQkFBbUI7RUFDbkIsc0JBQXNCO0VBQ3RCLG9CQUFvQjtFQUNwQixtQkFBbUI7RUFDbkIsdUJBQXVCO0VBQ3ZCLFNBQVM7RUFDVCxrREFBa0Q7RUFDbEQsNkJBQTZCO0VBQzdCLG1CQUFtQjtFQUNuQixnQkFBZ0I7RUFDaEIsb0ZBQW9GO0VBQ3BGLDREQUE0RDtFQUM1RCw4QkFBOEI7RUFDOUIsNkNBQTZDO0VBQzdDLGtDQUFrQztFQUNsQyx5QkFBeUI7RUFDekIsa0JBQWtCO0VBQ2xCLGdCQUFnQjtFQUNoQixnQkFBZ0I7RUFDaEIsZ0RBQWdEO0VBQ2hELGdCQUFnQjtFQUNoQixxQkFBcUI7RUFDckIsNERBQTREO0VBQzVELGdCQUFnQjtFQUNoQix1REFBdUQ7RUFDdkQsc0NBQXNDO0VBQ3RDLGVBQWU7RUFDZixlQUFlO0VBQ2YseUJBQWlCO0tBQWpCLHNCQUFpQjtVQUFqQixpQkFBaUI7RUFDakIsMEJBQTBCO0FBQzVCO0FBQ0E7RUFDRSxzQ0FBc0M7QUFDeEM7QUFDQTtFQUNFLDBEQUEwRDtBQUM1RDtBQUNBO0VBQ0UsK0NBQStDO0FBQ2pEO0FBQ0E7RUFDRSxxQkFBcUI7RUFDckIseUNBQXlDO0VBQ3pDLGlEQUFpRDtBQUNuRDtBQUNBO0VBQ0UsK0RBQStEO0FBQ2pFO0FBQ0E7RUFDRSx5Q0FBeUM7RUFDekMsdUJBQXVCO0VBQ3ZCLHVCQUF1QjtBQUN6QjtBQUNBO0VBQ0U7SUFDRSx5REFBeUQ7RUFDM0Q7QUFDRjtBQUNBO0VBQ0Usa0RBQWtEO0FBQ3BEO0FBQ0E7RUFDRSx3QkFBd0I7RUFDeEIsWUFBWTtFQUNaLHFFQUFxRTtFQUNyRSxvQkFBb0I7QUFDdEI7QUFDQTtFQUNFLHFEQUFxRDtFQUNyRCw0REFBNEQ7QUFDOUQ7QUFDQTtFQUNFLGNBQWM7RUFDZCw0QkFBNEI7RUFDNUIsMkJBQTJCO0VBQzNCLCtCQUErQjtFQUMvQixzQkFBc0I7RUFDdEIsaUJBQWlCO0VBQ2pCLGtCQUFrQjtBQUNwQjtBQUNBO0VBQ0Usa0JBQWtCO0VBQ2xCLHFCQUFxQjtFQUNyQixzQkFBc0I7QUFDeEI7QUFDQTtFQUNFLGFBQWE7QUFDZjtBQUNBO0VBQ0UsYUFBYTtFQUNiLHVCQUF1QjtFQUN2Qiw4QkFBOEI7RUFDOUIsV0FBVztFQUNYLGlGQUFpRjtFQUNqRixtQkFBbUI7RUFDbkIscUJBQXFCO0VBQ3JCLGdEQUFnRDtBQUNsRDtBQUNBO0VBQ0UsV0FBVztBQUNiIiwiZmlsZSI6Im5vay1idXR0b25zLmNzcyIsInNvdXJjZXNDb250ZW50IjpbbnVsbCwiLyohXG4gKiBCYXNlbGluZSBHcmlkIENTUyB2Mi4wLjAgLSAyNi04LTIwMjVcbiAqIE1peGluIHRvIGFwcGx5IGEgYmFzZWxpbmUgZ3JpZCB0byBhbiBlbGVtZW50IGFuZCBpdHMgY2hpbGRyZW5cbiAqIENvcHlyaWdodCAoYykgMjAyMi0yMDI1IGhubGRlc2lnbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFNlZSBodHRwczovL2hubGRlc2lnbi5oYXNobm9kZS5kZXYvc2V0dGluZy1hLWZsZXhpYmxlLWJhc2VsaW5lLWdyaWQtaW4tY3NzXG4gKlxuICogWW91IGNhbiBzZXQgLS1mcy10aHJlc2hvbGQtcmF0aW8gKHBlciBlbGVtZW50KSB0byBkZXRlcm1pbmUgdGhlIHBvaW50IGF0IHdoaWNoIHRoZSBiYXNlbGluZSBkb3VibGVzIChvciB0cmlwbGVzIGV0YykgaW4gc2l6ZS5cbiAqIFRoZSBkZWZhdWx0IGlzIGF0IDAuOCwgd2hpY2ggbWVhbnMgdGhhdCBpZiB0aGUgZm9udC1zaXplIGlzIG92ZXIgODAlIG9mIHRoZSBsaW5lLWhlaWdodCwgdGhlIGJhc2VsaW5lIHdpbGwgZG91YmxlLlxuICogVmFsaWQgdmFsdWVzIGFyZSBiZXR3ZWVuIDAgYW5kIDEgKHdpbGwgYmUgY2xhbXBlZCkuXG4gKi9cbi8qKlxuICogc3F1YXJlIGJsb2NrXG4gKi9cbi5ub2stYnV0dG9uIHtcbiAgLS1mbGV4LWdhcDogY2FsYyh2YXIoLS1ub2stcGFkZGluZy1iYXNlLCAxLjVyZW0pIC8gMik7XG4gIC0tYmctYWxwaGEtdmFsdWU6IDE7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiB2YXIoLS1mbGV4LWdhcCkgY2FsYyh2YXIoLS1mbGV4LWdhcCkgKiAyKTtcbiAgZ2FwOiB2YXIoLS1mbGV4LWdhcCwgMC43NXJlbSk7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIGZvbnQtZmFtaWx5OiB2YXIoLS1ub2staGVhZGluZy1mb250LWZhbWlseSwgXCJSZWFsaXN0XCIsIEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWYpO1xuICBmb250LXNpemUtYWRqdXN0OiB2YXIoLS1ub2staGVhZGluZy1mb250LXNpemUtYWRqdXN0LCAwLjQ0NCk7XG4gIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogMTAwJTtcbiAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiByZ2JhKDAsIDAsIDAsIDApO1xuICB0ZXh0LXJlbmRlcmluZzogb3B0aW1pemVsZWdpYmlsaXR5O1xuICBmb250LW9wdGljYWwtc2l6aW5nOiBhdXRvO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGZvbnQtc2l6ZTogdmFyKC0tbm9rLWZvbnQtc2l6ZS1idXR0b25zLCAxLjI1cmVtKTtcbiAgbGluZS1oZWlnaHQ6IDEuNTtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICBjb2xvcjogdmFyKC0tYmctY29sb3ItLWNvbnRyYXN0LCB2YXIoLS10ZXh0LWNvbG9yLCBpbmhlcml0KSk7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIGJvcmRlci1yYWRpdXM6IHZhcigtLW5vay1kZWZhdWx0LWJvcmRlci1yYWRpdXMsIDAuNHJlbSk7XG4gIGJvcmRlcjogMCBzb2xpZCByZ2JhKDEzNiwgMTM2LCAxMzYsIDApO1xuICBvdXRsaW5lOiAwIG5vbmU7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gIHRvdWNoLWFjdGlvbjogbWFuaXB1bGF0aW9uO1xufVxuLm5vay1idXR0b246bm90KC5uby1zaGFkb3cpIHtcbiAgYm94LXNoYWRvdzogMCAwIDAgMCBoc2xhKDAsIDAlLCAwJSwgMCk7XG59XG4ubm9rLWJ1dHRvbjpub3QoLm5vLXNoYWRvdyk6aG92ZXIsIC5ub2stYnV0dG9uOm5vdCgubm8tc2hhZG93KTpmb2N1cyB7XG4gIGJveC1zaGFkb3c6IDAgMC40cmVtIDAuMXJlbSAtMC4zcmVtIGhzbGEoMCwgMCUsIDUwJSwgMC4xNSk7XG59XG4ubm9rLWJ1dHRvbjpob3ZlciwgLm5vay1idXR0b246Zm9jdXMsIC5ub2stYnV0dG9uOmFjdGl2ZSwgLm5vay1idXR0b24uYWN0aXZlLCAubm9rLWJ1dHRvbjpmb2N1cy12aXNpYmxlIHtcbiAgYm9yZGVyLWNvbG9yOiByZ2JhKDEzNiwgMTM2LCAxMzYsIDAuMTMzMzMzMzMzMyk7XG59XG4ubm9rLWJ1dHRvbjpob3ZlciB7XG4gIC0tdGV4dC1hbHBoYS12YWx1ZTogMTtcbiAgY29sb3I6IHZhcigtLWJnLWNvbG9yLS1jb250cmFzdCwgaW5oZXJpdCk7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJnLWNvbG9yLS1ob3ZlciwgaW5oZXJpdCk7XG59XG4ubm9rLWJ1dHRvbjpmb2N1cyB7XG4gIG91dGxpbmU6IDJweCBzb2xpZCBoc2wodmFyKC0tYmctY29sb3ItaHNsLCAwZGVnIDEwMCUgNTAlKS8wLjI1KTtcbn1cbi5ub2stYnV0dG9uOmZvY3VzLXZpc2libGUge1xuICBib3gtc2hhZG93OiAwIDAgMHB4IDRweCB2YXIoLS1ub2steWVsbG93KTtcbiAgb3V0bGluZTogMnB4IHNvbGlkICNGRkY7XG4gIHdpbGwtY2hhbmdlOiBib3gtc2hhZG93O1xufVxuQG1lZGlhIChwcmVmZXJzLXJlZHVjZWQtbW90aW9uOiBuby1wcmVmZXJlbmNlKSB7XG4gIGJvZHkuX19lbmFibGUtdHJhbnNpdGlvbnMgLm5vay1idXR0b246Zm9jdXMtdmlzaWJsZSwgYm9keS5uby1qcyAubm9rLWJ1dHRvbjpmb2N1cy12aXNpYmxlIHtcbiAgICB0cmFuc2l0aW9uOiBib3gtc2hhZG93IDAuNnMgY3ViaWMtYmV6aWVyKDAuMTYsIDEsIDAuMywgMSk7XG4gIH1cbn1cbi5ub2stYnV0dG9uOmFjdGl2ZSwgLm5vay1idXR0b24uYWN0aXZlIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmctY29sb3ItLWFjdGl2ZSwgaW5oZXJpdCk7XG59XG4ubm9rLWJ1dHRvbjpkaXNhYmxlZCwgLm5vay1idXR0b24uZGlzYWJsZWQge1xuICAtLXRleHQtYWxwaGEtdmFsdWU6IDAuNjU7XG4gIG9wYWNpdHk6IDAuODtcbiAgY29sb3I6IHZhcigtLXRleHQtY29sb3ItYnV0dG9uLCB2YXIoLS10ZXh0LWNvbG9yLS1jb250cmFzdCwgaW5oZXJpdCkpO1xuICBwb2ludGVyLWV2ZW50czogbm9uZTtcbn1cbi5ub2stYnV0dG9uLS1zbWFsbCB7XG4gIC0tZmxleC1nYXA6IGNhbGModmFyKC0tbm9rLXBhZGRpbmctYmFzZSwgMS41cmVtKSAvIDQpO1xuICBmb250LXNpemU6IGNhbGModmFyKC0tbm9rLWZvbnQtc2l6ZS1idXR0b25zLCAxLjI1cmVtKSAqIDAuOCk7XG59XG4ubm9rLWJ1dHRvbi1tZW51IHtcbiAgLS1iZy1zaXplOiA1NSU7XG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG4gIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcbiAgYmFja2dyb3VuZC1zaXplOiB2YXIoLS1iZy1zaXplKTtcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgYXNwZWN0LXJhdGlvOiAxLzE7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cbi5ub2stYnV0dG9uLW1lbnUgc3ZnIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB3aWR0aDogdmFyKC0tYmctc2l6ZSk7XG4gIGhlaWdodDogdmFyKC0tYmctc2l6ZSk7XG59XG4ubm9rLWJ1dHRvbi1tZW51IHN2ZyAuY2xvc2VkIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cbi5ub2stYnV0dG9uLWdyb3VwIHtcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiAxZnI7XG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmcjtcbiAgd2lkdGg6IDEwMCU7XG4gIGdhcDogdmFyKC0tZ3JpZC1nYXAsIHZhcigtLW5vay1wYWRkaW5nLWJhc2UsIHZhcigtLW5vay1nbG9iYWwtZ3JpZC1nYXAsIDEuNXJlbSkpKTtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1pdGVtczogY2VudGVyO1xuICBmb250LXNpemU6IHZhcigtLW5vay1mb250LXNpemUtYnV0dG9ucywgMS4yNXJlbSk7XG59XG4ubm9rLWJ1dHRvbi1ncm91cCA+IGJ1dHRvbi5maWxsLWdyb3VwLWNvbHVtbiB7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG4vKiMgc291cmNlTWFwcGluZ1VSTD1ub2stYnV0dG9ucy5jc3MubWFwICovXG4iXX0= */