/*!
 * Baseline Grid CSS v2.0.0 - 26-8-2025
 * Mixin to apply a baseline grid to an element and its children
 * Copyright (c) 2022-2025 hnldesign. All rights reserved.
 * See https://hnldesign.hashnode.dev/setting-a-flexible-baseline-grid-in-css
 *
 * You can set --fs-threshold-ratio (per element) to determine the point at which the baseline doubles (or triples etc) in size.
 * The default is at 0.8, which means that if the font-size is over 80% of the line-height, the baseline will double.
 * Valid values are between 0 and 1 (will be clamped).
 */
/**
 * square block
 */
.nok-button {
  --flex-gap: calc(var(--nok-padding-base, 1.5rem) / 2);
  --bg-alpha-value: 1;
  box-sizing: border-box;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  margin: 0;
  padding: var(--flex-gap) calc(var(--flex-gap) * 2);
  gap: var(--flex-gap, 0.75rem);
  white-space: nowrap;
  overflow: hidden;
  font-family: var(--nok-heading-font-family, "Realist", Arial, Helvetica, sans-serif);
  font-size-adjust: var(--nok-heading-font-size-adjust, 0.444);
  -webkit-text-size-adjust: 100%;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  text-rendering: optimizelegibility;
  font-optical-sizing: auto;
  font-style: normal;
  font-weight: 500;
  font-weight: 500;
  font-size: var(--nok-font-size-buttons, 1.25rem);
  line-height: 1.5;
  text-decoration: none;
  color: var(--bg-color--contrast, var(--text-color, inherit));
  overflow: hidden;
  border-radius: var(--nok-default-border-radius, 0.4rem);
}
.nok-button:not(.no-shadow) {
  box-shadow: 0 0 0 0 hsla(0, 0%, 0%, 0);
}
.nok-button:not(.no-shadow):hover, .nok-button:not(.no-shadow):focus {
  box-shadow: 0 0.4rem 0.1rem -0.3rem hsla(0, 0%, 50%, 0.15);
}
.nok-button {
  border: 0 solid rgba(136, 136, 136, 0);
  outline: 0 none;
  cursor: pointer;
  -webkit-user-select: none;
     -moz-user-select: none;
          user-select: none;
  touch-action: manipulation;
}
.nok-button:hover, .nok-button:focus, .nok-button:active, .nok-button.active, .nok-button:focus-visible {
  border-color: rgba(136, 136, 136, 0.1333333333);
}
.nok-button:hover {
  --text-alpha-value: 1;
  color: var(--bg-color--contrast, inherit);
  background-color: var(--bg-color--hover, inherit);
}
.nok-button:focus {
  outline: 2px solid hsl(var(--bg-color-hsl, 0deg 100% 50%)/0.25);
}
.nok-button:focus-visible {
  box-shadow: 0 0 0px 4px var(--nok-yellow);
  outline: 2px solid #FFF;
  will-change: box-shadow;
}
@media (prefers-reduced-motion: no-preference) {
  body.__enable-transitions .nok-button:focus-visible, body.no-js .nok-button:focus-visible {
    transition: box-shadow 0.6s cubic-bezier(0.16, 1, 0.3, 1);
  }
}
.nok-button:active, .nok-button.active {
  background-color: var(--bg-color--active, inherit);
}
.nok-button:disabled, .nok-button.disabled {
  --text-alpha-value: 0.65;
  opacity: 0.8;
  color: var(--text-color-button, var(--text-color--contrast, inherit));
  pointer-events: none;
}
.nok-button--small {
  --flex-gap: calc(var(--nok-padding-base, 1.5rem) / 4);
  font-size: calc(var(--nok-font-size-buttons, 1.25rem) * 0.8);
}
.nok-button-menu {
  --bg-size: 55%;
  background-repeat: no-repeat;
  background-position: center;
  background-size: var(--bg-size);
  vertical-align: middle;
  aspect-ratio: 1/1;
  position: relative;
}
.nok-button-menu svg {
  position: absolute;
  width: var(--bg-size);
  height: var(--bg-size);
}
.nok-button-menu svg .closed {
  display: none;
}
.nok-button-group {
  display: grid;
  grid-template-rows: 1fr;
  grid-template-columns: 1fr 1fr;
  width: 100%;
  gap: var(--grid-gap, var(--nok-padding-base, var(--nok-global-grid-gap, 1.5rem)));
  align-items: center;
  justify-items: center;
  font-size: var(--nok-font-size-buttons, 1.25rem);
}
.nok-button-group > button.fill-group-column {
  width: 100%;
}

/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vay1idXR0b25zLnNjc3MiLCJub2stYnV0dG9ucy5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBV0E7Ozs7Ozs7OztFQ0ZFO0FBQ0Y7O0VBRUU7QUFDRjtFQUNFLHFEQUFxRDtFQUNyRCxtQkFBbUI7RUFDbkIsc0JBQXNCO0VBQ3RCLG9CQUFvQjtFQUNwQixtQkFBbUI7RUFDbkIsdUJBQXVCO0VBQ3ZCLFNBQVM7RUFDVCxrREFBa0Q7RUFDbEQsNkJBQTZCO0VBQzdCLG1CQUFtQjtFQUNuQixnQkFBZ0I7RUFDaEIsb0ZBQW9GO0VBQ3BGLDREQUE0RDtFQUM1RCw4QkFBOEI7RUFDOUIsNkNBQTZDO0VBQzdDLGtDQUFrQztFQUNsQyx5QkFBeUI7RUFDekIsa0JBQWtCO0VBQ2xCLGdCQUFnQjtFQUNoQixnQkFBZ0I7RUFDaEIsZ0RBQWdEO0VBQ2hELGdCQUFnQjtFQUNoQixxQkFBcUI7RUFDckIsNERBQTREO0VBQzVELGdCQUFnQjtFQUNoQix1REFBdUQ7QUFDekQ7QUFDQTtFQUNFLHNDQUFzQztBQUN4QztBQUNBO0VBQ0UsMERBQTBEO0FBQzVEO0FBQ0E7RUFDRSxzQ0FBc0M7RUFDdEMsZUFBZTtFQUNmLGVBQWU7RUFDZix5QkFBaUI7S0FBakIsc0JBQWlCO1VBQWpCLGlCQUFpQjtFQUNqQiwwQkFBMEI7QUFDNUI7QUFDQTtFQUNFLCtDQUErQztBQUNqRDtBQUNBO0VBQ0UscUJBQXFCO0VBQ3JCLHlDQUF5QztFQUN6QyxpREFBaUQ7QUFDbkQ7QUFDQTtFQUNFLCtEQUErRDtBQUNqRTtBQUNBO0VBQ0UseUNBQXlDO0VBQ3pDLHVCQUF1QjtFQUN2Qix1QkFBdUI7QUFDekI7QUFDQTtFQUNFO0lBQ0UseURBQXlEO0VBQzNEO0FBQ0Y7QUFDQTtFQUNFLGtEQUFrRDtBQUNwRDtBQUNBO0VBQ0Usd0JBQXdCO0VBQ3hCLFlBQVk7RUFDWixxRUFBcUU7RUFDckUsb0JBQW9CO0FBQ3RCO0FBQ0E7RUFDRSxxREFBcUQ7RUFDckQsNERBQTREO0FBQzlEO0FBQ0E7RUFDRSxjQUFjO0VBQ2QsNEJBQTRCO0VBQzVCLDJCQUEyQjtFQUMzQiwrQkFBK0I7RUFDL0Isc0JBQXNCO0VBQ3RCLGlCQUFpQjtFQUNqQixrQkFBa0I7QUFDcEI7QUFDQTtFQUNFLGtCQUFrQjtFQUNsQixxQkFBcUI7RUFDckIsc0JBQXNCO0FBQ3hCO0FBQ0E7RUFDRSxhQUFhO0FBQ2Y7QUFDQTtFQUNFLGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsOEJBQThCO0VBQzlCLFdBQVc7RUFDWCxpRkFBaUY7RUFDakYsbUJBQW1CO0VBQ25CLHFCQUFxQjtFQUNyQixnREFBZ0Q7QUFDbEQ7QUFDQTtFQUNFLFdBQVc7QUFDYiIsImZpbGUiOiJub2stYnV0dG9ucy5jc3MiLCJzb3VyY2VzQ29udGVudCI6W251bGwsIi8qIVxuICogQmFzZWxpbmUgR3JpZCBDU1MgdjIuMC4wIC0gMjYtOC0yMDI1XG4gKiBNaXhpbiB0byBhcHBseSBhIGJhc2VsaW5lIGdyaWQgdG8gYW4gZWxlbWVudCBhbmQgaXRzIGNoaWxkcmVuXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjItMjAyNSBobmxkZXNpZ24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTZWUgaHR0cHM6Ly9obmxkZXNpZ24uaGFzaG5vZGUuZGV2L3NldHRpbmctYS1mbGV4aWJsZS1iYXNlbGluZS1ncmlkLWluLWNzc1xuICpcbiAqIFlvdSBjYW4gc2V0IC0tZnMtdGhyZXNob2xkLXJhdGlvIChwZXIgZWxlbWVudCkgdG8gZGV0ZXJtaW5lIHRoZSBwb2ludCBhdCB3aGljaCB0aGUgYmFzZWxpbmUgZG91YmxlcyAob3IgdHJpcGxlcyBldGMpIGluIHNpemUuXG4gKiBUaGUgZGVmYXVsdCBpcyBhdCAwLjgsIHdoaWNoIG1lYW5zIHRoYXQgaWYgdGhlIGZvbnQtc2l6ZSBpcyBvdmVyIDgwJSBvZiB0aGUgbGluZS1oZWlnaHQsIHRoZSBiYXNlbGluZSB3aWxsIGRvdWJsZS5cbiAqIFZhbGlkIHZhbHVlcyBhcmUgYmV0d2VlbiAwIGFuZCAxICh3aWxsIGJlIGNsYW1wZWQpLlxuICovXG4vKipcbiAqIHNxdWFyZSBibG9ja1xuICovXG4ubm9rLWJ1dHRvbiB7XG4gIC0tZmxleC1nYXA6IGNhbGModmFyKC0tbm9rLXBhZGRpbmctYmFzZSwgMS41cmVtKSAvIDIpO1xuICAtLWJnLWFscGhhLXZhbHVlOiAxO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogdmFyKC0tZmxleC1nYXApIGNhbGModmFyKC0tZmxleC1nYXApICogMik7XG4gIGdhcDogdmFyKC0tZmxleC1nYXAsIDAuNzVyZW0pO1xuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBmb250LWZhbWlseTogdmFyKC0tbm9rLWhlYWRpbmctZm9udC1mYW1pbHksIFwiUmVhbGlzdFwiLCBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmKTtcbiAgZm9udC1zaXplLWFkanVzdDogdmFyKC0tbm9rLWhlYWRpbmctZm9udC1zaXplLWFkanVzdCwgMC40NDQpO1xuICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7XG4gIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwKTtcbiAgdGV4dC1yZW5kZXJpbmc6IG9wdGltaXplbGVnaWJpbGl0eTtcbiAgZm9udC1vcHRpY2FsLXNpemluZzogYXV0bztcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LXdlaWdodDogNTAwO1xuICBmb250LXdlaWdodDogNTAwO1xuICBmb250LXNpemU6IHZhcigtLW5vay1mb250LXNpemUtYnV0dG9ucywgMS4yNXJlbSk7XG4gIGxpbmUtaGVpZ2h0OiAxLjU7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgY29sb3I6IHZhcigtLWJnLWNvbG9yLS1jb250cmFzdCwgdmFyKC0tdGV4dC1jb2xvciwgaW5oZXJpdCkpO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBib3JkZXItcmFkaXVzOiB2YXIoLS1ub2stZGVmYXVsdC1ib3JkZXItcmFkaXVzLCAwLjRyZW0pO1xufVxuLm5vay1idXR0b246bm90KC5uby1zaGFkb3cpIHtcbiAgYm94LXNoYWRvdzogMCAwIDAgMCBoc2xhKDAsIDAlLCAwJSwgMCk7XG59XG4ubm9rLWJ1dHRvbjpub3QoLm5vLXNoYWRvdyk6aG92ZXIsIC5ub2stYnV0dG9uOm5vdCgubm8tc2hhZG93KTpmb2N1cyB7XG4gIGJveC1zaGFkb3c6IDAgMC40cmVtIDAuMXJlbSAtMC4zcmVtIGhzbGEoMCwgMCUsIDUwJSwgMC4xNSk7XG59XG4ubm9rLWJ1dHRvbiB7XG4gIGJvcmRlcjogMCBzb2xpZCByZ2JhKDEzNiwgMTM2LCAxMzYsIDApO1xuICBvdXRsaW5lOiAwIG5vbmU7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gIHRvdWNoLWFjdGlvbjogbWFuaXB1bGF0aW9uO1xufVxuLm5vay1idXR0b246aG92ZXIsIC5ub2stYnV0dG9uOmZvY3VzLCAubm9rLWJ1dHRvbjphY3RpdmUsIC5ub2stYnV0dG9uLmFjdGl2ZSwgLm5vay1idXR0b246Zm9jdXMtdmlzaWJsZSB7XG4gIGJvcmRlci1jb2xvcjogcmdiYSgxMzYsIDEzNiwgMTM2LCAwLjEzMzMzMzMzMzMpO1xufVxuLm5vay1idXR0b246aG92ZXIge1xuICAtLXRleHQtYWxwaGEtdmFsdWU6IDE7XG4gIGNvbG9yOiB2YXIoLS1iZy1jb2xvci0tY29udHJhc3QsIGluaGVyaXQpO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iZy1jb2xvci0taG92ZXIsIGluaGVyaXQpO1xufVxuLm5vay1idXR0b246Zm9jdXMge1xuICBvdXRsaW5lOiAycHggc29saWQgaHNsKHZhcigtLWJnLWNvbG9yLWhzbCwgMGRlZyAxMDAlIDUwJSkvMC4yNSk7XG59XG4ubm9rLWJ1dHRvbjpmb2N1cy12aXNpYmxlIHtcbiAgYm94LXNoYWRvdzogMCAwIDBweCA0cHggdmFyKC0tbm9rLXllbGxvdyk7XG4gIG91dGxpbmU6IDJweCBzb2xpZCAjRkZGO1xuICB3aWxsLWNoYW5nZTogYm94LXNoYWRvdztcbn1cbkBtZWRpYSAocHJlZmVycy1yZWR1Y2VkLW1vdGlvbjogbm8tcHJlZmVyZW5jZSkge1xuICBib2R5Ll9fZW5hYmxlLXRyYW5zaXRpb25zIC5ub2stYnV0dG9uOmZvY3VzLXZpc2libGUsIGJvZHkubm8tanMgLm5vay1idXR0b246Zm9jdXMtdmlzaWJsZSB7XG4gICAgdHJhbnNpdGlvbjogYm94LXNoYWRvdyAwLjZzIGN1YmljLWJlemllcigwLjE2LCAxLCAwLjMsIDEpO1xuICB9XG59XG4ubm9rLWJ1dHRvbjphY3RpdmUsIC5ub2stYnV0dG9uLmFjdGl2ZSB7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJnLWNvbG9yLS1hY3RpdmUsIGluaGVyaXQpO1xufVxuLm5vay1idXR0b246ZGlzYWJsZWQsIC5ub2stYnV0dG9uLmRpc2FibGVkIHtcbiAgLS10ZXh0LWFscGhhLXZhbHVlOiAwLjY1O1xuICBvcGFjaXR5OiAwLjg7XG4gIGNvbG9yOiB2YXIoLS10ZXh0LWNvbG9yLWJ1dHRvbiwgdmFyKC0tdGV4dC1jb2xvci0tY29udHJhc3QsIGluaGVyaXQpKTtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG59XG4ubm9rLWJ1dHRvbi0tc21hbGwge1xuICAtLWZsZXgtZ2FwOiBjYWxjKHZhcigtLW5vay1wYWRkaW5nLWJhc2UsIDEuNXJlbSkgLyA0KTtcbiAgZm9udC1zaXplOiBjYWxjKHZhcigtLW5vay1mb250LXNpemUtYnV0dG9ucywgMS4yNXJlbSkgKiAwLjgpO1xufVxuLm5vay1idXR0b24tbWVudSB7XG4gIC0tYmctc2l6ZTogNTUlO1xuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7XG4gIGJhY2tncm91bmQtc2l6ZTogdmFyKC0tYmctc2l6ZSk7XG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIGFzcGVjdC1yYXRpbzogMS8xO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG4ubm9rLWJ1dHRvbi1tZW51IHN2ZyB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgd2lkdGg6IHZhcigtLWJnLXNpemUpO1xuICBoZWlnaHQ6IHZhcigtLWJnLXNpemUpO1xufVxuLm5vay1idXR0b24tbWVudSBzdmcgLmNsb3NlZCB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG4ubm9rLWJ1dHRvbi1ncm91cCB7XG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGdyaWQtdGVtcGxhdGUtcm93czogMWZyO1xuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnI7XG4gIHdpZHRoOiAxMDAlO1xuICBnYXA6IHZhcigtLWdyaWQtZ2FwLCB2YXIoLS1ub2stcGFkZGluZy1iYXNlLCB2YXIoLS1ub2stZ2xvYmFsLWdyaWQtZ2FwLCAxLjVyZW0pKSk7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcbiAgZm9udC1zaXplOiB2YXIoLS1ub2stZm9udC1zaXplLWJ1dHRvbnMsIDEuMjVyZW0pO1xufVxuLm5vay1idXR0b24tZ3JvdXAgPiBidXR0b24uZmlsbC1ncm91cC1jb2x1bW4ge1xuICB3aWR0aDogMTAwJTtcbn1cblxuLyojIHNvdXJjZU1hcHBpbmdVUkw9bm9rLWJ1dHRvbnMuY3NzLm1hcCAqL1xuIl19 */