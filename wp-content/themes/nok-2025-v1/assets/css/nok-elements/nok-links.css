/**
    * Mixin to apply styles when the DOM is fully loaded.
    * By hnldesign - 2025
    *
    * This mixin targets elements when the `body` element has the `domready` class,
    * indicating that the DOM is fully loaded and parsed.
    *
    * Usage:
    * @include domready {
    *   // Your styles here
    * }
 */
/*!
 * Baseline Grid CSS v2.0.0 - 26-8-2025
 * Mixin to apply a baseline grid to an element and its children
 * Copyright (c) 2022-2025 hnldesign. All rights reserved.
 * See https://hnldesign.hashnode.dev/setting-a-flexible-baseline-grid-in-css
 *
 * You can set --fs-threshold-ratio (per element) to determine the point at which the baseline doubles (or triples etc) in size.
 * The default is at 0.8, which means that if the font-size is over 80% of the line-height, the baseline will double.
 * Valid values are between 0 and 1 (will be clamped).
 */
/**
 * hyperlink
 */
.nok-hyperlink:not(.nok-button) {
  color: var(--text-color, var(--text-color----bg-color--contrast, inherit));
  --underline-color: var(--text-color, var(--text-color--contrast, inherit));
  --underline-color--active: var(--text-color--contrast, inherit);
  --active-color: #000;
  --hover-transition-time: 0.1s;
  --hover-color: var(--text-color--hover, var(--bg-color--contrast, inherit));
  --underline-height: 0.2ex;
  --padding: 0.35ex;
  --gradient: linear-gradient(
                  transparent 0%,
                  transparent calc(50% - var(--underline-height)),
                  var(--underline-color) calc(50% - var(--underline-height)),
                  var(--underline-color) 150%
  );
  -webkit-tap-highlight-color: transparent;
  text-decoration: none;
  text-decoration-line: none;
  position: relative;
  padding: var(--padding) 0;
  bottom: calc(-0.25 * (var(--padding)));
  background-image: var(--gradient);
  background-size: 100% 200%;
  background-repeat: no-repeat;
  background-position: 0 0;
  will-change: background-position;
}
@media (prefers-reduced-motion: no-preference) {
  body.__enable-transitions .nok-hyperlink:not(.nok-button), body.no-js .nok-hyperlink:not(.nok-button) {
    transition: background-position var(--hover-transition-time) ease-out, color var(--hover-transition-time) ease-out;
  }
}
.nok-hyperlink:not(.nok-button):hover {
  --underline-color: var(--hover-color);
  color: var(--hover-color);
  background-position: 0 calc(-1 * var(--underline-height));
  text-decoration-line: none;
}
.nok-hyperlink:not(.nok-button):active, .nok-hyperlink:not(.nok-button):hover:focus:not(:focus-visible) {
  padding: var(--padding);
  margin: auto calc(-1 * var(--padding));
  color: var(--underline-color--active);
  background-position: 0 100%;
}
.nok-hyperlink:not(.nok-button):focus-visible {
  overflow: hidden;
  border-radius: var(--nok-default-border-radius, 0.4rem);
  box-shadow: 0 0 0px 4px var(--nok-yellow);
  outline: 2px solid #FFF;
  will-change: box-shadow;
}
@media (prefers-reduced-motion: no-preference) {
  body.__enable-transitions .nok-hyperlink:not(.nok-button):focus-visible, body.no-js .nok-hyperlink:not(.nok-button):focus-visible {
    transition: box-shadow 0.6s cubic-bezier(0.16, 1, 0.3, 1);
  }
}
.nok-hyperlink:not(.nok-button) svg, .nok-hyperlink:not(.nok-button) img {
  display: inline;
}
p .nok-hyperlink:not(.nok-button) {
  color: var(--nok25-lightblue, inherit);
  --underline-color: var(--nok25-lightblue, inherit);
  --underline-color--active: var(--nok25-lightblue--contrast, inherit);
}

/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vay1saW5rcy5zY3NzIiwibm9rLWxpbmtzLmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFRQTs7Ozs7Ozs7Ozs7RUNHRTtBQUNGOzs7Ozs7Ozs7RUFTRTtBQUNGOztFQUVFO0FBQ0Y7RUFDRSwwRUFBMEU7RUFDMUUsMEVBQTBFO0VBQzFFLCtEQUErRDtFQUMvRCxvQkFBb0I7RUFDcEIsNkJBQTZCO0VBQzdCLDJFQUEyRTtFQUMzRSx5QkFBeUI7RUFDekIsaUJBQWlCO0VBQ2pCOzs7OztHQUtDO0VBQ0Qsd0NBQXdDO0VBQ3hDLHFCQUFxQjtFQUNyQiwwQkFBMEI7RUFDMUIsa0JBQWtCO0VBQ2xCLHlCQUF5QjtFQUN6QixzQ0FBc0M7RUFDdEMsaUNBQWlDO0VBQ2pDLDBCQUEwQjtFQUMxQiw0QkFBNEI7RUFDNUIsd0JBQXdCO0VBQ3hCLGdDQUFnQztBQUNsQztBQUNBO0VBQ0U7SUFDRSxrSEFBa0g7RUFDcEg7QUFDRjtBQUNBO0VBQ0UscUNBQXFDO0VBQ3JDLHlCQUF5QjtFQUN6Qix5REFBeUQ7RUFDekQsMEJBQTBCO0FBQzVCO0FBQ0E7RUFDRSx1QkFBdUI7RUFDdkIsc0NBQXNDO0VBQ3RDLHFDQUFxQztFQUNyQywyQkFBMkI7QUFDN0I7QUFDQTtFQUNFLGdCQUFnQjtFQUNoQix1REFBdUQ7RUFDdkQseUNBQXlDO0VBQ3pDLHVCQUF1QjtFQUN2Qix1QkFBdUI7QUFDekI7QUFDQTtFQUNFO0lBQ0UseURBQXlEO0VBQzNEO0FBQ0Y7QUFDQTtFQUNFLGVBQWU7QUFDakI7QUFDQTtFQUNFLHNDQUFzQztFQUN0QyxrREFBa0Q7RUFDbEQsb0VBQW9FO0FBQ3RFIiwiZmlsZSI6Im5vay1saW5rcy5jc3MiLCJzb3VyY2VzQ29udGVudCI6W251bGwsIi8qKlxuICAgICogTWl4aW4gdG8gYXBwbHkgc3R5bGVzIHdoZW4gdGhlIERPTSBpcyBmdWxseSBsb2FkZWQuXG4gICAgKiBCeSBobmxkZXNpZ24gLSAyMDI1XG4gICAgKlxuICAgICogVGhpcyBtaXhpbiB0YXJnZXRzIGVsZW1lbnRzIHdoZW4gdGhlIGBib2R5YCBlbGVtZW50IGhhcyB0aGUgYGRvbXJlYWR5YCBjbGFzcyxcbiAgICAqIGluZGljYXRpbmcgdGhhdCB0aGUgRE9NIGlzIGZ1bGx5IGxvYWRlZCBhbmQgcGFyc2VkLlxuICAgICpcbiAgICAqIFVzYWdlOlxuICAgICogQGluY2x1ZGUgZG9tcmVhZHkge1xuICAgICogICAvLyBZb3VyIHN0eWxlcyBoZXJlXG4gICAgKiB9XG4gKi9cbi8qIVxuICogQmFzZWxpbmUgR3JpZCBDU1MgdjIuMC4wIC0gMjYtOC0yMDI1XG4gKiBNaXhpbiB0byBhcHBseSBhIGJhc2VsaW5lIGdyaWQgdG8gYW4gZWxlbWVudCBhbmQgaXRzIGNoaWxkcmVuXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjItMjAyNSBobmxkZXNpZ24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTZWUgaHR0cHM6Ly9obmxkZXNpZ24uaGFzaG5vZGUuZGV2L3NldHRpbmctYS1mbGV4aWJsZS1iYXNlbGluZS1ncmlkLWluLWNzc1xuICpcbiAqIFlvdSBjYW4gc2V0IC0tZnMtdGhyZXNob2xkLXJhdGlvIChwZXIgZWxlbWVudCkgdG8gZGV0ZXJtaW5lIHRoZSBwb2ludCBhdCB3aGljaCB0aGUgYmFzZWxpbmUgZG91YmxlcyAob3IgdHJpcGxlcyBldGMpIGluIHNpemUuXG4gKiBUaGUgZGVmYXVsdCBpcyBhdCAwLjgsIHdoaWNoIG1lYW5zIHRoYXQgaWYgdGhlIGZvbnQtc2l6ZSBpcyBvdmVyIDgwJSBvZiB0aGUgbGluZS1oZWlnaHQsIHRoZSBiYXNlbGluZSB3aWxsIGRvdWJsZS5cbiAqIFZhbGlkIHZhbHVlcyBhcmUgYmV0d2VlbiAwIGFuZCAxICh3aWxsIGJlIGNsYW1wZWQpLlxuICovXG4vKipcbiAqIGh5cGVybGlua1xuICovXG4ubm9rLWh5cGVybGluazpub3QoLm5vay1idXR0b24pIHtcbiAgY29sb3I6IHZhcigtLXRleHQtY29sb3IsIHZhcigtLXRleHQtY29sb3ItLS0tYmctY29sb3ItLWNvbnRyYXN0LCBpbmhlcml0KSk7XG4gIC0tdW5kZXJsaW5lLWNvbG9yOiB2YXIoLS10ZXh0LWNvbG9yLCB2YXIoLS10ZXh0LWNvbG9yLS1jb250cmFzdCwgaW5oZXJpdCkpO1xuICAtLXVuZGVybGluZS1jb2xvci0tYWN0aXZlOiB2YXIoLS10ZXh0LWNvbG9yLS1jb250cmFzdCwgaW5oZXJpdCk7XG4gIC0tYWN0aXZlLWNvbG9yOiAjMDAwO1xuICAtLWhvdmVyLXRyYW5zaXRpb24tdGltZTogMC4xcztcbiAgLS1ob3Zlci1jb2xvcjogdmFyKC0tdGV4dC1jb2xvci0taG92ZXIsIHZhcigtLWJnLWNvbG9yLS1jb250cmFzdCwgaW5oZXJpdCkpO1xuICAtLXVuZGVybGluZS1oZWlnaHQ6IDAuMmV4O1xuICAtLXBhZGRpbmc6IDAuMzVleDtcbiAgLS1ncmFkaWVudDogbGluZWFyLWdyYWRpZW50KFxuICAgICAgICAgICAgICAgICAgdHJhbnNwYXJlbnQgMCUsXG4gICAgICAgICAgICAgICAgICB0cmFuc3BhcmVudCBjYWxjKDUwJSAtIHZhcigtLXVuZGVybGluZS1oZWlnaHQpKSxcbiAgICAgICAgICAgICAgICAgIHZhcigtLXVuZGVybGluZS1jb2xvcikgY2FsYyg1MCUgLSB2YXIoLS11bmRlcmxpbmUtaGVpZ2h0KSksXG4gICAgICAgICAgICAgICAgICB2YXIoLS11bmRlcmxpbmUtY29sb3IpIDE1MCVcbiAgKTtcbiAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICB0ZXh0LWRlY29yYXRpb24tbGluZTogbm9uZTtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBwYWRkaW5nOiB2YXIoLS1wYWRkaW5nKSAwO1xuICBib3R0b206IGNhbGMoLTAuMjUgKiAodmFyKC0tcGFkZGluZykpKTtcbiAgYmFja2dyb3VuZC1pbWFnZTogdmFyKC0tZ3JhZGllbnQpO1xuICBiYWNrZ3JvdW5kLXNpemU6IDEwMCUgMjAwJTtcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogMCAwO1xuICB3aWxsLWNoYW5nZTogYmFja2dyb3VuZC1wb3NpdGlvbjtcbn1cbkBtZWRpYSAocHJlZmVycy1yZWR1Y2VkLW1vdGlvbjogbm8tcHJlZmVyZW5jZSkge1xuICBib2R5Ll9fZW5hYmxlLXRyYW5zaXRpb25zIC5ub2staHlwZXJsaW5rOm5vdCgubm9rLWJ1dHRvbiksIGJvZHkubm8tanMgLm5vay1oeXBlcmxpbms6bm90KC5ub2stYnV0dG9uKSB7XG4gICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1wb3NpdGlvbiB2YXIoLS1ob3Zlci10cmFuc2l0aW9uLXRpbWUpIGVhc2Utb3V0LCBjb2xvciB2YXIoLS1ob3Zlci10cmFuc2l0aW9uLXRpbWUpIGVhc2Utb3V0O1xuICB9XG59XG4ubm9rLWh5cGVybGluazpub3QoLm5vay1idXR0b24pOmhvdmVyIHtcbiAgLS11bmRlcmxpbmUtY29sb3I6IHZhcigtLWhvdmVyLWNvbG9yKTtcbiAgY29sb3I6IHZhcigtLWhvdmVyLWNvbG9yKTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogMCBjYWxjKC0xICogdmFyKC0tdW5kZXJsaW5lLWhlaWdodCkpO1xuICB0ZXh0LWRlY29yYXRpb24tbGluZTogbm9uZTtcbn1cbi5ub2staHlwZXJsaW5rOm5vdCgubm9rLWJ1dHRvbik6YWN0aXZlLCAubm9rLWh5cGVybGluazpub3QoLm5vay1idXR0b24pOmhvdmVyOmZvY3VzOm5vdCg6Zm9jdXMtdmlzaWJsZSkge1xuICBwYWRkaW5nOiB2YXIoLS1wYWRkaW5nKTtcbiAgbWFyZ2luOiBhdXRvIGNhbGMoLTEgKiB2YXIoLS1wYWRkaW5nKSk7XG4gIGNvbG9yOiB2YXIoLS11bmRlcmxpbmUtY29sb3ItLWFjdGl2ZSk7XG4gIGJhY2tncm91bmQtcG9zaXRpb246IDAgMTAwJTtcbn1cbi5ub2staHlwZXJsaW5rOm5vdCgubm9rLWJ1dHRvbik6Zm9jdXMtdmlzaWJsZSB7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIGJvcmRlci1yYWRpdXM6IHZhcigtLW5vay1kZWZhdWx0LWJvcmRlci1yYWRpdXMsIDAuNHJlbSk7XG4gIGJveC1zaGFkb3c6IDAgMCAwcHggNHB4IHZhcigtLW5vay15ZWxsb3cpO1xuICBvdXRsaW5lOiAycHggc29saWQgI0ZGRjtcbiAgd2lsbC1jaGFuZ2U6IGJveC1zaGFkb3c7XG59XG5AbWVkaWEgKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IG5vLXByZWZlcmVuY2UpIHtcbiAgYm9keS5fX2VuYWJsZS10cmFuc2l0aW9ucyAubm9rLWh5cGVybGluazpub3QoLm5vay1idXR0b24pOmZvY3VzLXZpc2libGUsIGJvZHkubm8tanMgLm5vay1oeXBlcmxpbms6bm90KC5ub2stYnV0dG9uKTpmb2N1cy12aXNpYmxlIHtcbiAgICB0cmFuc2l0aW9uOiBib3gtc2hhZG93IDAuNnMgY3ViaWMtYmV6aWVyKDAuMTYsIDEsIDAuMywgMSk7XG4gIH1cbn1cbi5ub2staHlwZXJsaW5rOm5vdCgubm9rLWJ1dHRvbikgc3ZnLCAubm9rLWh5cGVybGluazpub3QoLm5vay1idXR0b24pIGltZyB7XG4gIGRpc3BsYXk6IGlubGluZTtcbn1cbnAgLm5vay1oeXBlcmxpbms6bm90KC5ub2stYnV0dG9uKSB7XG4gIGNvbG9yOiB2YXIoLS1ub2syNS1saWdodGJsdWUsIGluaGVyaXQpO1xuICAtLXVuZGVybGluZS1jb2xvcjogdmFyKC0tbm9rMjUtbGlnaHRibHVlLCBpbmhlcml0KTtcbiAgLS11bmRlcmxpbmUtY29sb3ItLWFjdGl2ZTogdmFyKC0tbm9rMjUtbGlnaHRibHVlLS1jb250cmFzdCwgaW5oZXJpdCk7XG59XG5cbi8qIyBzb3VyY2VNYXBwaW5nVVJMPW5vay1saW5rcy5jc3MubWFwICovXG4iXX0= */