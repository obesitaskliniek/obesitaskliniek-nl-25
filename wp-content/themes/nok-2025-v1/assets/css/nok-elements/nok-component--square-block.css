/**
    * Mixin to apply styles when the DOM is fully loaded.
    * By hnldesign - 2025
    *
    * This mixin targets elements when the `body` element has the `domready` class,
    * indicating that the DOM is fully loaded and parsed.
    *
    * Usage:
    * @include domready {
    *   // Your styles here
    * }
 */
/*!
 * Baseline Grid CSS v2.0.0 - 26-8-2025
 * Mixin to apply a baseline grid to an element and its children
 * Copyright (c) 2022-2025 hnldesign. All rights reserved.
 * See https://hnldesign.hashnode.dev/setting-a-flexible-baseline-grid-in-css
 *
 * You can set --fs-threshold-ratio (per element) to determine the point at which the baseline doubles (or triples etc) in size.
 * The default is at 0.8, which means that if the font-size is over 80% of the line-height, the baseline will double.
 * Valid values are between 0 and 1 (will be clamped).
 */
/**
 * square block
 */
nok-square-block,
:host {
  --text-alpha-value: 0.8;
  --icon-color: var(--nok-yellow);
  --text-color: hsla(var(--nok-white-hsl) / var(--global-color-alpha, var(--text-alpha-value, 1)));
  --text-color--heading: hsla(var(--nok-white-hsl) / 1);
  --text-color--link: hsla(var(--nok-white-hsl) / 1);
  --text-color--link--hover: var(--nok-yellow);
  --text-color--link-icon: var(--nok-lightblue);
  --text-color--link-icon--hover: var(--nok-yellow);
  --background-color: var(--nok-darkblue);
  position: relative;
  display: grid;
  grid-template-rows: auto;
  container-type: inline-size;
  gap: 1.5rem;
  overflow: hidden;
  border-radius: var(--nok-default-border-radius--large, 1rem);
  padding: var(--nok-padding-section-sides, 3rem);
  border-radius: var(--nok-default-border-radius--large, 8px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  background-color: var(--background-color);
}
nok-square-block > *,
:host > * {
  margin: 0;
}

.nok-square-block__icon {
  color: var(--icon-color);
  display: flex;
}
.nok-square-block__icon svg {
  width: 3em;
  height: 3em;
  aspect-ratio: 1;
}
.nok-square-block__heading {
  color: var(--text-color--heading);
  font-weight: 500;
}
.nok-square-block__text {
  color: var(--text-color);
  font-size: 1.1rem;
}
.nok-square-block__link {
  display: grid;
  grid-template-columns: auto 1fr;
  justify-content: start;
  align-items: center;
  justify-items: start;
  cursor: pointer;
  gap: calc(var(--nok-padding-base, 1.5rem) / 2);
  height: 2rem;
  --text-alpha-value: 0.8;
  color: var(--text-color--link);
  text-decoration: none;
  text-transform: uppercase;
  font-weight: 600;
  font-size: 1rem;
}
.nok-square-block__link svg {
  color: var(--text-color--link-icon);
}
.nok-square-block__link::after {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 1;
  content: "";
}
.nok-square-block__link:hover {
  --text-color--link: var(--text-color--link--hover);
  --text-color--link-icon: var(--text-color--link-icon--hover);
}

/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vay1jb21wb25lbnQtLXNxdWFyZS1ibG9jay5zY3NzIiwibm9rLWNvbXBvbmVudC0tc3F1YXJlLWJsb2NrLmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFXQTs7Ozs7Ozs7Ozs7RUNBRTtBQUNGOzs7Ozs7Ozs7RUFTRTtBQUNGOztFQUVFO0FBQ0Y7O0VBRUUsdUJBQXVCO0VBQ3ZCLCtCQUErQjtFQUMvQixnR0FBZ0c7RUFDaEcscURBQXFEO0VBQ3JELGtEQUFrRDtFQUNsRCw0Q0FBNEM7RUFDNUMsNkNBQTZDO0VBQzdDLGlEQUFpRDtFQUNqRCx1Q0FBdUM7RUFDdkMsa0JBQWtCO0VBQ2xCLGFBQWE7RUFDYix3QkFBd0I7RUFDeEIsMkJBQTJCO0VBQzNCLFdBQVc7RUFDWCxnQkFBZ0I7RUFDaEIsNERBQTREO0VBQzVELCtDQUErQztFQUMvQywyREFBMkQ7RUFDM0Qsd0NBQXdDO0VBQ3hDLHlDQUF5QztBQUMzQztBQUNBOztFQUVFLFNBQVM7QUFDWDs7QUFFQTtFQUNFLHdCQUF3QjtFQUN4QixhQUFhO0FBQ2Y7QUFDQTtFQUNFLFVBQVU7RUFDVixXQUFXO0VBQ1gsZUFBZTtBQUNqQjtBQUNBO0VBQ0UsaUNBQWlDO0VBQ2pDLGdCQUFnQjtBQUNsQjtBQUNBO0VBQ0Usd0JBQXdCO0VBQ3hCLGlCQUFpQjtBQUNuQjtBQUNBO0VBQ0UsYUFBYTtFQUNiLCtCQUErQjtFQUMvQixzQkFBc0I7RUFDdEIsbUJBQW1CO0VBQ25CLG9CQUFvQjtFQUNwQixlQUFlO0VBQ2YsOENBQThDO0VBQzlDLFlBQVk7RUFDWix1QkFBdUI7RUFDdkIsOEJBQThCO0VBQzlCLHFCQUFxQjtFQUNyQix5QkFBeUI7RUFDekIsZ0JBQWdCO0VBQ2hCLGVBQWU7QUFDakI7QUFDQTtFQUNFLG1DQUFtQztBQUNyQztBQUNBO0VBQ0Usa0JBQWtCO0VBQ2xCLE1BQU07RUFDTixRQUFRO0VBQ1IsU0FBUztFQUNULE9BQU87RUFDUCxVQUFVO0VBQ1YsV0FBVztBQUNiO0FBQ0E7RUFDRSxrREFBa0Q7RUFDbEQsNERBQTREO0FBQzlEIiwiZmlsZSI6Im5vay1jb21wb25lbnQtLXNxdWFyZS1ibG9jay5jc3MiLCJzb3VyY2VzQ29udGVudCI6W251bGwsIi8qKlxuICAgICogTWl4aW4gdG8gYXBwbHkgc3R5bGVzIHdoZW4gdGhlIERPTSBpcyBmdWxseSBsb2FkZWQuXG4gICAgKiBCeSBobmxkZXNpZ24gLSAyMDI1XG4gICAgKlxuICAgICogVGhpcyBtaXhpbiB0YXJnZXRzIGVsZW1lbnRzIHdoZW4gdGhlIGBib2R5YCBlbGVtZW50IGhhcyB0aGUgYGRvbXJlYWR5YCBjbGFzcyxcbiAgICAqIGluZGljYXRpbmcgdGhhdCB0aGUgRE9NIGlzIGZ1bGx5IGxvYWRlZCBhbmQgcGFyc2VkLlxuICAgICpcbiAgICAqIFVzYWdlOlxuICAgICogQGluY2x1ZGUgZG9tcmVhZHkge1xuICAgICogICAvLyBZb3VyIHN0eWxlcyBoZXJlXG4gICAgKiB9XG4gKi9cbi8qIVxuICogQmFzZWxpbmUgR3JpZCBDU1MgdjIuMC4wIC0gMjYtOC0yMDI1XG4gKiBNaXhpbiB0byBhcHBseSBhIGJhc2VsaW5lIGdyaWQgdG8gYW4gZWxlbWVudCBhbmQgaXRzIGNoaWxkcmVuXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjItMjAyNSBobmxkZXNpZ24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTZWUgaHR0cHM6Ly9obmxkZXNpZ24uaGFzaG5vZGUuZGV2L3NldHRpbmctYS1mbGV4aWJsZS1iYXNlbGluZS1ncmlkLWluLWNzc1xuICpcbiAqIFlvdSBjYW4gc2V0IC0tZnMtdGhyZXNob2xkLXJhdGlvIChwZXIgZWxlbWVudCkgdG8gZGV0ZXJtaW5lIHRoZSBwb2ludCBhdCB3aGljaCB0aGUgYmFzZWxpbmUgZG91YmxlcyAob3IgdHJpcGxlcyBldGMpIGluIHNpemUuXG4gKiBUaGUgZGVmYXVsdCBpcyBhdCAwLjgsIHdoaWNoIG1lYW5zIHRoYXQgaWYgdGhlIGZvbnQtc2l6ZSBpcyBvdmVyIDgwJSBvZiB0aGUgbGluZS1oZWlnaHQsIHRoZSBiYXNlbGluZSB3aWxsIGRvdWJsZS5cbiAqIFZhbGlkIHZhbHVlcyBhcmUgYmV0d2VlbiAwIGFuZCAxICh3aWxsIGJlIGNsYW1wZWQpLlxuICovXG4vKipcbiAqIHNxdWFyZSBibG9ja1xuICovXG5ub2stc3F1YXJlLWJsb2NrLFxuOmhvc3Qge1xuICAtLXRleHQtYWxwaGEtdmFsdWU6IDAuODtcbiAgLS1pY29uLWNvbG9yOiB2YXIoLS1ub2steWVsbG93KTtcbiAgLS10ZXh0LWNvbG9yOiBoc2xhKHZhcigtLW5vay13aGl0ZS1oc2wpIC8gdmFyKC0tZ2xvYmFsLWNvbG9yLWFscGhhLCB2YXIoLS10ZXh0LWFscGhhLXZhbHVlLCAxKSkpO1xuICAtLXRleHQtY29sb3ItLWhlYWRpbmc6IGhzbGEodmFyKC0tbm9rLXdoaXRlLWhzbCkgLyAxKTtcbiAgLS10ZXh0LWNvbG9yLS1saW5rOiBoc2xhKHZhcigtLW5vay13aGl0ZS1oc2wpIC8gMSk7XG4gIC0tdGV4dC1jb2xvci0tbGluay0taG92ZXI6IHZhcigtLW5vay15ZWxsb3cpO1xuICAtLXRleHQtY29sb3ItLWxpbmstaWNvbjogdmFyKC0tbm9rLWxpZ2h0Ymx1ZSk7XG4gIC0tdGV4dC1jb2xvci0tbGluay1pY29uLS1ob3ZlcjogdmFyKC0tbm9rLXllbGxvdyk7XG4gIC0tYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbm9rLWRhcmtibHVlKTtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBkaXNwbGF5OiBncmlkO1xuICBncmlkLXRlbXBsYXRlLXJvd3M6IGF1dG87XG4gIGNvbnRhaW5lci10eXBlOiBpbmxpbmUtc2l6ZTtcbiAgZ2FwOiAxLjVyZW07XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIGJvcmRlci1yYWRpdXM6IHZhcigtLW5vay1kZWZhdWx0LWJvcmRlci1yYWRpdXMtLWxhcmdlLCAxcmVtKTtcbiAgcGFkZGluZzogdmFyKC0tbm9rLXBhZGRpbmctc2VjdGlvbi1zaWRlcywgM3JlbSk7XG4gIGJvcmRlci1yYWRpdXM6IHZhcigtLW5vay1kZWZhdWx0LWJvcmRlci1yYWRpdXMtLWxhcmdlLCA4cHgpO1xuICBib3gtc2hhZG93OiAwIDRweCA4cHggcmdiYSgwLCAwLCAwLCAwLjEpO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iYWNrZ3JvdW5kLWNvbG9yKTtcbn1cbm5vay1zcXVhcmUtYmxvY2sgPiAqLFxuOmhvc3QgPiAqIHtcbiAgbWFyZ2luOiAwO1xufVxuXG4ubm9rLXNxdWFyZS1ibG9ja19faWNvbiB7XG4gIGNvbG9yOiB2YXIoLS1pY29uLWNvbG9yKTtcbiAgZGlzcGxheTogZmxleDtcbn1cbi5ub2stc3F1YXJlLWJsb2NrX19pY29uIHN2ZyB7XG4gIHdpZHRoOiAzZW07XG4gIGhlaWdodDogM2VtO1xuICBhc3BlY3QtcmF0aW86IDE7XG59XG4ubm9rLXNxdWFyZS1ibG9ja19faGVhZGluZyB7XG4gIGNvbG9yOiB2YXIoLS10ZXh0LWNvbG9yLS1oZWFkaW5nKTtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbn1cbi5ub2stc3F1YXJlLWJsb2NrX190ZXh0IHtcbiAgY29sb3I6IHZhcigtLXRleHQtY29sb3IpO1xuICBmb250LXNpemU6IDEuMXJlbTtcbn1cbi5ub2stc3F1YXJlLWJsb2NrX19saW5rIHtcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBhdXRvIDFmcjtcbiAganVzdGlmeS1jb250ZW50OiBzdGFydDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1pdGVtczogc3RhcnQ7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgZ2FwOiBjYWxjKHZhcigtLW5vay1wYWRkaW5nLWJhc2UsIDEuNXJlbSkgLyAyKTtcbiAgaGVpZ2h0OiAycmVtO1xuICAtLXRleHQtYWxwaGEtdmFsdWU6IDAuODtcbiAgY29sb3I6IHZhcigtLXRleHQtY29sb3ItLWxpbmspO1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGZvbnQtc2l6ZTogMXJlbTtcbn1cbi5ub2stc3F1YXJlLWJsb2NrX19saW5rIHN2ZyB7XG4gIGNvbG9yOiB2YXIoLS10ZXh0LWNvbG9yLS1saW5rLWljb24pO1xufVxuLm5vay1zcXVhcmUtYmxvY2tfX2xpbms6OmFmdGVyIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIHJpZ2h0OiAwO1xuICBib3R0b206IDA7XG4gIGxlZnQ6IDA7XG4gIHotaW5kZXg6IDE7XG4gIGNvbnRlbnQ6IFwiXCI7XG59XG4ubm9rLXNxdWFyZS1ibG9ja19fbGluazpob3ZlciB7XG4gIC0tdGV4dC1jb2xvci0tbGluazogdmFyKC0tdGV4dC1jb2xvci0tbGluay0taG92ZXIpO1xuICAtLXRleHQtY29sb3ItLWxpbmstaWNvbjogdmFyKC0tdGV4dC1jb2xvci0tbGluay1pY29uLS1ob3Zlcik7XG59XG5cbi8qIyBzb3VyY2VNYXBwaW5nVVJMPW5vay1jb21wb25lbnQtLXNxdWFyZS1ibG9jay5jc3MubWFwICovXG4iXX0= */